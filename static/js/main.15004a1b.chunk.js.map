{"version":3,"sources":["types/MultilingualText.ts","contexts/language.tsx","components/x-choice/Choice.tsx","components/x-choices/Choices.tsx","components/x-question/Question.tsx","components/x-questions/Questions.tsx","components/x-stage-info/StageInfo.tsx","components/x-email-assessment-button/EmailAssessmentButton.tsx","types/AreaResult.ts","components/x-assessment/Assessment.tsx","types/Stage.ts","types/AreaScore.ts","types/RawQuestion.ts","components/x-language-list/LanguageList.tsx","components/x-topbar/TopBar.tsx","components/x-header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","missing","Object","keys","first","console","warn","defaultLanguage","code","languages","getLanguage","debug","find","value","JSON","stringify","LanguageProvider","children","useState","localStorage","getItem","setLanguage","useEffect","setItem","LanguageContext","Provider","createContext","undefined","useLanguage","context","useContext","Error","Choice","choice","index","found","label","Typography","variant","points","FormControlLabel","control","Radio","Choices","handleChange","question","RadioGroup","aria-label","name","onChange","event","Number","target","sx","flex","choices","map","Question","Card","CardHeader","title","titleTypographyProps","color","size","fontWeight","textAlign","textTransform","FormControl","component","required","CardContent","FormLabel","fontSize","Divider","CardActions","Questions","questions","Grid","alignItems","container","direction","justifyContent","spacing","item","zeroMinWidth","StageInfo","stage","id","foundId","description","foundDescription","foundName","align","range","min","max","mailto","body","subject","encodeURI","EmailAssessmentButton","results","s","idFound","nameFound","area","join","Button","href","rel","startIcon","Email","errorStage","finalizeResults","scores","stages","score","percentage","current","total","Math","round","filter","length","error","getStage","log","stagesJson","Assessment","Map","forEach","get","type","answer","reduce","set","Array","from","values","computeScores","components","createComponent","parse","LanguageList","Select","minWidth","MenuItem","TopBar","AppBar","position","Toolbar","IconButton","flexGrow","Header","className","rawQuestions","questionsJson","parsedQuestions","loadQuestions","App","state","setState","Container","prevQuestions","value1","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"0VAIO,SAASA,EAAQC,EAAwBC,GAC9C,IAAIC,EAASF,EAAKC,GACZE,GAAWD,EACjB,GAAIC,EAAS,CACX,MAAgBC,OAAOC,KAAKL,GAArBM,EAAP,oBACAJ,EAASF,EAAKM,GACdC,QAAQC,KAAR,eAAqBP,EAArB,gDAAqEC,EAArE,sCAAyGI,EAAzG,eAEF,MAAO,CAACJ,GAASC,G,+CCVbM,EAAkB,CACtBC,KAAM,KACNV,KAAM,WAKKW,EAAY,CACvBF,EACA,CACEC,KAAM,KACNV,KAAM,iBAIH,SAASY,EAAYF,GAC1BH,QAAQM,MAAR,mCAA0CH,IAC1C,IAAMT,EAAWU,EAAUG,MAAK,SAACC,GAAD,OAAWA,EAAML,OAASA,MAASD,EAEnE,OADAF,QAAQM,MAAR,uCAA8CG,KAAKC,UAAUhB,KACtDA,EAOF,SAASiB,EAAT,GAA6E,IAAjDC,EAAgD,EAAhDA,SACjC,EAAgCC,mBAASR,EAAYS,aAAaC,QAAQ,cAA1E,mBAAOrB,EAAP,KAAiBsB,EAAjB,KACMR,EAAQ,CAAEd,WAAUsB,eAI1B,OAHAC,qBAAU,WACRH,aAAaI,QAAQ,WAAYxB,EAASS,QACzC,CAACT,IACG,cAACyB,EAAgBC,SAAjB,CAA0BZ,MAAOA,EAAjC,SAAyCI,IAQ3C,IAAMO,EAAkBE,6BAA+CC,GAEvE,SAASC,IACd,IAAMC,EAAUC,qBAAWN,GAC3B,QAAgBG,IAAZE,EACF,MAAM,IAAIE,MAAM,sDAElB,OAAOF,ECtCF,SAASG,EAAT,GAA8D,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,MACvBnC,EAAa6B,IAAb7B,SACR,EAAsBF,EAAQoC,EAAOnC,KAAMC,EAASS,MAApD,mBAAOV,EAAP,KAAaqC,EAAb,KACMC,EACJ,eAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACGH,EAAQ,GAAK,IACbrC,KAGCe,EAAK,UAAMoB,EAAOM,QACxB,OAAO,cAACC,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,IAAuBN,MAAOA,EAAOvB,MAAOA,GAA5BqB,GCV7C,SAASS,EAAT,GAAyE,IAAtDC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,SACtC,OACE,cAACC,EAAA,EAAD,CACEC,aAAW,UACXC,KAAK,UACLC,SAAU,SAACC,GACT,IAAMrC,EAAQsC,OAAOD,EAAME,OAAOvC,OAClCR,QAAQM,MAAR,kDAAyDkC,EAASX,MAAlE,cAA6ErB,IAC7E+B,EAAaC,EAAUhC,IAEzBwC,GAAI,CAAEC,KAAM,QARd,SAUGT,EAASU,QAAQC,KAAI,SAACvB,EAAQC,GAC7B,OAAO,cAACF,EAAD,CAAQC,OAAQA,EAAQC,MAAOA,GAAYA,QCXnD,SAASuB,EAAT,GAA2E,IAAvDb,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,SAC/B9C,EAAa6B,IAAb7B,SACR,EAAsBF,EAAQgD,EAAS/C,KAAMC,EAASS,MAAtD,mBAAOV,EAAP,KAAaqC,EAAb,KACA,OACE,eAACuB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,MAAK,mBAAcf,EAASX,OAC5B2B,qBAAsB,CACpBC,MAAO,gBACPxB,QAAS,QACTyB,KAAM,QACNV,GAAI,CAAEW,WAAY,OAAQC,UAAW,QAASC,cAAe,gBAGjE,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAWC,UAAQ,EAA1C,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEH,UAAU,SACVC,UAAQ,EACRhB,GAAI,CAAEmB,SAAU,UAAWR,WAAY,UAAWC,UAAW,SAH/D,UAKG9B,EAAQ,GAAK,IACbrC,OAGL,cAACwE,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,MAEF,cAACH,EAAA,EAAD,UACE,cAACI,EAAA,EAAD,UACE,cAAC/B,EAAD,CAASC,aAAcA,EAAcC,SAAUA,cChCpD,SAAS8B,EAAT,GAA8E,IAAzD/B,EAAwD,EAAxDA,aAAcgC,EAA0C,EAA1CA,UACxC,OACE,cAACC,EAAA,EAAD,CAAMC,WAAW,UAAUC,WAAS,EAACC,UAAU,SAASC,eAAe,SAASC,QAAS,EAAzF,SACGN,EAAUpB,KAAI,SAACX,GAAD,OACb,cAACgC,EAAA,EAAD,CAAMM,MAAI,EAAsBC,cAAY,EAA5C,SACE,cAAC3B,EAAD,CAAUb,aAAcA,EAAmCC,SAAUA,GAA1BA,EAASX,QADtCW,EAASX,Y,qBCL1B,SAASmD,EAAT,GAA4D,IAAvCC,EAAsC,EAAtCA,MAClBvF,EAAa6B,IAAb7B,SACR,EAAsBF,EAAQyF,EAAMC,GAAIxF,EAASS,MAAjD,mBAAO+E,EAAP,KAAWC,EAAX,KACA,EAAwC3F,EAAQyF,EAAMG,YAAa1F,EAASS,MAA5E,mBAAOiF,EAAP,KAAoBC,EAApB,KACA,EAA0B7F,EAAQyF,EAAMtC,KAAMjD,EAASS,MAAvD,mBAAOwC,EAAP,KAAa2C,EAAb,KACA,OACE,cAACjC,EAAA,EAAD,CAAMpB,QAAQ,WAAd,SACE,eAACgC,EAAA,EAAD,WACE,eAACjC,EAAA,EAAD,CAAYuD,MAAM,OAAO9B,MAAM,gBAAgBxB,QAAQ,QAAvD,UACGgD,EAAMO,MAAMC,IADf,SAC2BR,EAAMO,MAAME,IADvC,OAGA,eAAC1D,EAAA,EAAD,CAAYuD,MAAM,OAAOtD,QAAQ,YAAjC,UACGkD,EAAU,GAAK,IACfD,EAFH,KAESI,EAAY,GAAK,IACvB3C,KAEH,eAACX,EAAA,EAAD,CAAYuD,MAAM,OAAOtD,QAAQ,QAAjC,UACGoD,EAAmB,GAAK,IACxBD,U,sBCrBX,SAASO,EAAOC,EAAcC,GAC5B,OAAOC,UAAU,gBAAD,OAAiBF,EAAjB,oBAAiCC,IAO5C,SAASE,EAAT,GAAsF,IAArDC,EAAoD,EAApDA,QAC9BtG,EAAa6B,IAAb7B,SACFuG,EAAID,EAAQ7C,KAAI,SAACxD,GACrB,MAAsBH,EAAQG,EAAOsF,MAAMC,GAAIxF,EAASS,MAAxD,mBAAO+E,EAAP,KAAWgB,EAAX,KACA,EAA0B1G,EAAQG,EAAOsF,MAAMtC,KAAMjD,EAASS,MAA9D,mBAAOwC,EAAP,KAAawD,EAAb,KACA,MAAM,GAAN,OAAUxG,EAAOyG,KAAjB,cAA2BF,EAAU,GAAK,KAA1C,OAAgDhB,EAAhD,aAAuDiB,EAAY,GAAK,KAAxE,OAA8ExD,MAE1EiD,EAAI,6EAAyEK,EAAEI,KAAK,SAC1F,OACE,cAACC,EAAA,EAAD,CACEC,KAAMZ,EAAOC,EAAM,+CACnBY,IAAI,sBACJC,UAAW,cAACC,EAAA,EAAD,IACX3D,OAAO,SACPd,QAAQ,WALV,8BChBJ,IAAM0E,EAAoB,CACxBvB,YAAa,CACX,GAAM,qBAERF,GAAI,CACF,GAAM,YAERvC,KAAM,CACJ,GAAM,cAER6C,MAAO,CACLE,KAAM,EACND,KAAM,IAeH,SAASmB,EAAgBC,EAAkCC,GAChE,OAAOD,EAAO1D,KAAI,SAAC4D,GACjB,IAbkBvG,EAaZwG,GAbYxG,EAacuG,EAAME,QAAUF,EAAMG,MAbVC,KAAKC,MAAc,IAAR5G,IAcjDyE,EAZO,SAAC+B,EAAoBF,GACpC,IAAMO,EAASP,EAAOO,QAAO,SAACpC,GAAD,OAAWA,EAAMO,MAAMC,KAAOuB,GAAcA,GAAc/B,EAAMO,MAAME,OACnG,OAAsB,IAAlB2B,EAAOC,OACFD,EAAO,IAEhBrH,QAAQuH,MAAR,cAAqBP,EAArB,uDAA8EvG,KAAKC,UAAU2G,KACtFV,GAMSa,CAASR,EAAYF,GACnC,OAAO,2BACFC,GADL,IAEEC,WAAYA,EACZ/B,MAAOA,OC/Bb,IAAM6B,GCGJ9G,QAAQyH,IAAR,kBAAuBC,EAAWJ,OAAlC,gBACOI,GDUF,SAASC,EAAT,GAAkE,IAA5CpD,EAA2C,EAA3CA,UACnB7E,EAAa6B,IAAb7B,SAEFsG,EAAUY,EEnBX,SAAuBrC,GAC5B,IAAMpB,EAAM,IAAIyE,IAUhB,OATArD,EAAUsD,SAAQ,SAACrF,GAAc,IAAD,EAC1BuE,EAAK,UAAG5D,EAAI2E,IAAItF,EAASuF,aAApB,QAA6B,CAAE3B,KAAM5D,EAASuF,KAAMd,QAAS,EAAGC,MAAO,GAChFH,EAAQ,CACNX,KAAMW,EAAMX,KACZa,QAASF,EAAME,QAAUzE,EAASwF,OAClCd,MAAOH,EAAMG,MAAQ1E,EAASU,QAAQ+E,QAAO,SAACvC,EAAK9D,GAAN,OAAiBuF,KAAKzB,IAAIA,EAAK9D,EAAOM,UAAS,IAE9FiB,EAAI+E,IAAI1F,EAASuF,KAAMhB,MAElBoB,MAAMC,KAAKjF,EAAIkF,UFOPC,CAAc/D,GACWuC,GAClCyB,EAhBR,SAAyBvC,EAAoCtG,GAC3D,OAAOsG,EAAQ7C,KAAI,SAACxD,EAAQkC,GAC1B7B,QAAQM,MAAR,mDAA0DuB,EAA1D,oBAA2EpB,KAAKC,UAAUf,KAC1F,MAAsBH,EAAQG,EAAOsF,MAAMtC,KAAMjD,GAAjD,mBAAOD,EAAP,KAAaqC,EAAb,KACA,MAAM,GAAN,OAAUnC,EAAOyG,KAAjB,aAA0BzG,EAAOsH,QAAjC,cAA8CtH,EAAOuH,MAArD,cAAgEvH,EAAOqH,WAAvE,cAAuFlF,EAAQ,GAAK,KAApG,OAA0GrC,MAYzF+I,CAAgBxC,EAAStG,EAASS,MACrD,OACE,eAACkD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,MAAM,uBAClB,eAACU,EAAA,EAAD,WACE,6BACGsE,EAAWpF,KAAI,SAAC3C,EAAOqB,GAAR,OACd,6BAAiBrB,GAARqB,QAGZiF,EAAO3D,KAAI,SAAC8B,EAAOpD,GAAR,OACV,cAACmD,EAAD,CAAuBC,MAAOA,GAAdpD,SAGpB,cAACwC,EAAA,EAAD,UACE,cAAC0B,EAAD,CAAuBC,QAASA,S,YGhCxC,SAASyC,EAAMjI,EAAoBqB,GAEjC,OADA7B,QAAQM,MAAR,oCAA2CuB,EAA3C,mBAA2DpB,KAAKC,UAAUF,KACnE,CACLwH,OAAQ,EACR9E,QAAS1C,EAAM0C,QACfrB,MAAOA,EAAQ,EACfpC,KAAMe,EAAMf,KACZsI,KAAMvH,EAAMuH,M,kECfT,SAASW,IACd,MAAkCnH,IAA1B7B,EAAR,EAAQA,SAAUsB,EAAlB,EAAkBA,YAKlB,OACE,cAAC8C,EAAA,EAAD,UACE,cAAC6E,EAAA,EAAD,CAAQzD,GAAG,kBAAkBtC,SANZ,SAACC,GACpB7B,EAAYX,EAAYwC,EAAME,OAAOvC,SAKkBwC,GAAI,CAAE4F,SAAU,KAAOpI,MAAOd,EAASS,KAA5F,SACGC,EAAU+C,KAAI,SAAC3C,GAAD,OACb,cAACqI,EAAA,EAAD,CAA2BrI,MAAOA,EAAML,KAAxC,SACGK,EAAMf,MADMe,EAAML,aCTxB,SAAS2I,KACd,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYxG,aAAW,OAAvB,SACE,cAAC,IAAD,MAEF,cAACV,EAAA,EAAD,CAAYgB,GAAI,CAAEmG,SAAU,EAAGvF,UAAW,SAAW3B,QAAQ,KAA7D,4CAGA,cAACyG,EAAD,SCZD,SAASU,KACd,OACE,yBAAQC,UAAU,aAAlB,UACE,cAACP,GAAD,IADF,oCCMJ,IAAMvE,GJYC,WACL,IAAM+E,EAAeC,EACrBvJ,QAAQyH,IAAR,kBAAuB6B,EAAahC,OAApC,mBACA,IAAMkC,EAAkBF,EAAanG,IAAIsF,GAEzC,OADAzI,QAAQM,MAAR,8CAAqDG,KAAKC,UAAU8I,KAC7DA,EIjBSC,GAgCHC,OA9Bf,WACE,MAA0B7I,mBAAS0D,IAAnC,mBAAOoF,EAAP,KAAcC,EAAd,KAeA,OACE,cAACjJ,EAAD,UACE,sBAAK0I,UAAU,MAAf,UACE,cAACD,GAAD,IACA,eAACS,EAAA,EAAD,WACE,cAAC7H,EAAA,EAAD,wBACA,cAACsC,EAAD,CAAW/B,aAnBuB,SAACC,EAAoBhC,GAC7DR,QAAQM,MAAR,0CAAiDE,EAAjD,sBAAoEC,KAAKC,UAAU8B,KACnFoH,GAAS,SAACE,GACR,OAAOA,EAAc3G,KAAI,SAAC4G,GACxB,IAAMC,EAAI,eAAQD,GAIlB,OAHIA,EAAOlI,QAAUW,EAASX,QAC5BmI,EAAKhC,OAASxH,GAETwJ,SAWkCzF,UAAWoF,IAClD,cAAChC,EAAD,CAAYpD,UAAWoF,aCtBlBM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,UCFdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,GAAA,EAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,SAM1Bd,GAAgBjK,QAAQyH,M","file":"static/js/main.15004a1b.chunk.js","sourcesContent":["export interface MultilingualText {\n  readonly [language: string]: string;\n}\n\nexport function getText(text: MultilingualText, language: string): [string, boolean] {\n  let result = text[language];\n  const missing = !result;\n  if (missing) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return [result, !missing];\n}\n","import React, { createContext, Dispatch, ReactNode, SetStateAction, useContext, useEffect, useState } from 'react';\n\nconst defaultLanguage = {\n  code: 'en',\n  text: 'English',\n};\n\nexport type Language = typeof defaultLanguage;\n\nexport const languages = [\n  defaultLanguage,\n  {\n    code: 'zh',\n    text: '中文',\n  },\n];\n\nexport function getLanguage(code: string | unknown): Language {\n  console.debug(`>>> getLanguage() : code=${code}`);\n  const language = languages.find((value) => value.code === code) || defaultLanguage;\n  console.debug(`>>> getLanguage() : language=${JSON.stringify(language)}`);\n  return language;\n}\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps): JSX.Element {\n  const [language, setLanguage] = useState(getLanguage(localStorage.getItem('language')));\n  const value = { language, setLanguage };\n  useEffect(() => {\n    localStorage.setItem('language', language.code);\n  }, [language]);\n  return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;\n}\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: Dispatch<SetStateAction<Language>>;\n}\n\nexport const LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","import React from 'react';\nimport { Choice as IChoice } from '../../types/Choice';\nimport { getText } from '../../types/MultilingualText';\nimport { FormControlLabel, Radio, Typography } from '@mui/material';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface ChoiceProps {\n  readonly choice: IChoice;\n  readonly index: number;\n}\n\nexport function Choice({ choice, index }: ChoiceProps): JSX.Element {\n  const { language } = useLanguage();\n  const [text, found] = getText(choice.text, language.code);\n  const label = (\n    <Typography variant=\"body2\">\n      {found ? '' : '*'}\n      {text}\n    </Typography>\n  );\n  const value = `${choice.points}`;\n  return <FormControlLabel control={<Radio />} key={index} label={label} value={value} />;\n}\n","import React, { ChangeEvent } from 'react';\nimport { RadioGroup } from '@mui/material';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Choice } from '../x-choice/Choice';\nimport { Question } from '../../types/Question';\n\nexport interface ChoicesProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly question: Question;\n}\n\nexport function Choices({ handleChange, question }: ChoicesProps): JSX.Element {\n  return (\n    <RadioGroup\n      aria-label=\"choices\"\n      name=\"choices\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const value = Number(event.target.value);\n        console.debug(`>>> Choices::onChange(): question.index=${question.index} : ${value}`);\n        handleChange(question, value);\n      }}\n      sx={{ flex: 'auto' }}\n    >\n      {question.choices.map((choice, index) => {\n        return <Choice choice={choice} index={index} key={index} />;\n      })}\n    </RadioGroup>\n  );\n}\n","import React from 'react';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Card, CardActions, CardContent, CardHeader, Divider, FormControl, FormLabel } from '@mui/material';\nimport { getText } from '../../types/MultilingualText';\nimport { Choices } from '../x-choices/Choices';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface QuestionProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly question: IQuestion;\n}\n\nexport function Question({ handleChange, question }: QuestionProps): JSX.Element {\n  const { language } = useLanguage();\n  const [text, found] = getText(question.text, language.code);\n  return (\n    <Card>\n      <CardHeader\n        title={`Question ${question.index}`}\n        titleTypographyProps={{\n          color: 'textSecondary',\n          variant: 'body2',\n          size: 'small',\n          sx: { fontWeight: 'bold', textAlign: 'start', textTransform: 'uppercase' },\n        }}\n      />\n      <FormControl component=\"fieldset\" required>\n        <CardContent>\n          <FormLabel\n            component=\"legend\"\n            required\n            sx={{ fontSize: 'x-large', fontWeight: 'lighter', textAlign: 'start' }}\n          >\n            {found ? '' : '*'}\n            {text}\n          </FormLabel>\n        </CardContent>\n        <CardContent>\n          <Divider />\n        </CardContent>\n        <CardContent>\n          <CardActions>\n            <Choices handleChange={handleChange} question={question} />\n          </CardActions>\n        </CardContent>\n      </FormControl>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Grid } from '@mui/material';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Question } from '../x-question/Question';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\n\nexport interface QuestionsProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly questions: ReadonlyArray<IQuestion>;\n}\n\nexport function Questions({ handleChange, questions }: QuestionsProps): JSX.Element {\n  return (\n    <Grid alignItems=\"stretch\" container direction=\"column\" justifyContent=\"center\" spacing={2}>\n      {questions.map((question) => (\n        <Grid item key={question.index} zeroMinWidth>\n          <Question handleChange={handleChange} key={question.index} question={question} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { getText } from '../../types/MultilingualText';\nimport { Stage } from '../../types/Stage';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface StageInfoProps {\n  readonly stage: Stage;\n}\n\nexport function StageInfo({ stage }: StageInfoProps): JSX.Element {\n  const { language } = useLanguage();\n  const [id, foundId] = getText(stage.id, language.code);\n  const [description, foundDescription] = getText(stage.description, language.code);\n  const [name, foundName] = getText(stage.name, language.code);\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Typography align=\"left\" color=\"textSecondary\" variant=\"body2\">\n          {stage.range.min}&ndash;{stage.range.max}%\n        </Typography>\n        <Typography align=\"left\" variant=\"subtitle1\">\n          {foundId ? '' : '*'}\n          {id}: {foundName ? '' : '*'}\n          {name}\n        </Typography>\n        <Typography align=\"left\" variant=\"body2\">\n          {foundDescription ? '' : '*'}\n          {description}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Button } from '@mui/material';\nimport { Email } from '@mui/icons-material';\nimport { AreaResult } from '../../types/AreaResult';\nimport { getText } from '../../types/MultilingualText';\nimport { useLanguage } from '../../contexts/language';\n\nfunction mailto(body: string, subject: string): string {\n  return encodeURI(`mailto:?body=${body}&subject=${subject}`);\n}\n\nexport interface EmailAssessmentButtonProps {\n  readonly results: ReadonlyArray<AreaResult>;\n}\n\nexport function EmailAssessmentButton({ results }: EmailAssessmentButtonProps): JSX.Element {\n  const { language } = useLanguage();\n  const s = results.map((result) => {\n    const [id, idFound] = getText(result.stage.id, language.code);\n    const [name, nameFound] = getText(result.stage.name, language.code);\n    return `${result.area} : ${idFound ? '' : '*'}${id}: ${nameFound ? '' : '*'}${name}`;\n  });\n  const body = `Here is the assessment from the Grace Spiritual Discovery Tool.\\n- ${s.join('\\n- ')}`;\n  return (\n    <Button\n      href={mailto(body, 'Grace Spiritual Discovery Tool - Assessment')}\n      rel=\"noopener noreferrer\"\n      startIcon={<Email />}\n      target=\"_blank\"\n      variant=\"outlined\"\n    >\n      Email Assessment\n    </Button>\n  );\n}\n","import { Stage } from './Stage';\nimport { AreaScore } from './AreaScore';\n\nexport interface AreaResult extends AreaScore {\n  readonly percentage: number\n  readonly stage: Stage\n}\n\nconst errorStage: Stage = {\n  description: {\n    'en': 'Error Description',\n  },\n  id: {\n    'en': 'Error ID',\n  },\n  name: {\n    'en': 'Error Name',\n  },\n  range: {\n    max: -1,\n    min: -1,\n  },\n};\n\nconst toPercentage = (value: number): number => Math.round(value * 100);\n\nconst getStage = (percentage: number, stages: ReadonlyArray<Stage>): Stage => {\n  const filter = stages.filter((stage) => stage.range.min <= percentage && percentage <= stage.range.max);\n  if (filter.length === 1) {\n    return filter[0];\n  }\n  console.error(`The ${percentage} percentage resulted in an unexpected list: ${JSON.stringify(filter)}`);\n  return errorStage;\n};\n\nexport function finalizeResults(scores: ReadonlyArray<AreaScore>, stages: ReadonlyArray<Stage>): ReadonlyArray<AreaResult> {\n  return scores.map((score) => {\n    const percentage = toPercentage(score.current / score.total);\n    const stage = getStage(percentage, stages);\n    return {\n      ...score,\n      percentage: percentage,\n      stage: stage,\n    };\n  });\n}\n","import React from 'react';\nimport { Card, CardActions, CardContent, CardHeader } from '@mui/material';\nimport { Question } from '../../types/Question';\nimport { loadStages } from '../../types/Stage';\nimport { getText } from '../../types/MultilingualText';\nimport { StageInfo } from '../x-stage-info/StageInfo';\nimport { EmailAssessmentButton } from '../x-email-assessment-button/EmailAssessmentButton';\nimport { computeScores } from '../../types/AreaScore';\nimport { AreaResult, finalizeResults } from '../../types/AreaResult';\nimport { useLanguage } from '../../contexts/language';\n\nconst stages = loadStages();\n\nfunction createComponent(results: ReadonlyArray<AreaResult>, language: string): ReadonlyArray<string> {\n  return results.map((result, index) => {\n    console.debug(`>>> Assessment::createComponent(): index=${index}, result=${JSON.stringify(result)}`);\n    const [text, found] = getText(result.stage.name, language);\n    return `${result.area}: ${result.current} / ${result.total} : ${result.percentage}%: ${found ? '' : '*'}${text}`;\n  });\n}\n\nexport interface AssessmentProps {\n  readonly questions: ReadonlyArray<Question>;\n}\n\nexport function Assessment({ questions }: AssessmentProps): JSX.Element {\n  const { language } = useLanguage();\n  const scores = computeScores(questions);\n  const results = finalizeResults(scores, stages);\n  const components = createComponent(results, language.code);\n  return (\n    <Card>\n      <CardHeader title=\"Assessment Results\" />\n      <CardContent>\n        <ol>\n          {components.map((value, index) => (\n            <li key={index}>{value}</li>\n          ))}\n        </ol>\n        {stages.map((stage, index) => (\n          <StageInfo key={index} stage={stage} />\n        ))}\n      </CardContent>\n      <CardActions>\n        <EmailAssessmentButton results={results} />\n      </CardActions>\n    </Card>\n  );\n}\n","import { MultilingualText } from './MultilingualText';\nimport stagesJson from '../assets/stages.json';\n\nexport interface Stage {\n  readonly description: MultilingualText\n  readonly id: MultilingualText\n  readonly name: MultilingualText\n  readonly range: {\n    readonly min: number\n    readonly max: number\n  }\n}\n\nexport function loadStages(): ReadonlyArray<Stage> {\n  console.log(`Loading ${stagesJson.length} stages ...`);\n  return stagesJson;\n}\n","import { QuestionType } from './QuestionType';\nimport { Question } from './Question';\n\nexport interface AreaScore {\n  readonly area: QuestionType\n  readonly current: number\n  readonly total: number\n}\n\nexport function computeScores(questions: ReadonlyArray<Question>): ReadonlyArray<AreaScore> {\n  const map = new Map<QuestionType, AreaScore>();\n  questions.forEach((question) => {\n    let score = map.get(question.type) ?? { area: question.type, current: 0, total: 0 };\n    score = {\n      area: score.area,\n      current: score.current + question.answer,\n      total: score.total + question.choices.reduce((max, choice) => Math.max(max, choice.points), 0),\n    };\n    map.set(question.type, score);\n  });\n  return Array.from(map.values());\n}\n","import { MultilingualText } from './MultilingualText';\nimport { QuestionType } from './QuestionType';\nimport { Choice } from './Choice';\nimport questionsJson from '../assets/questions.json';\nimport { Question } from './Question';\n\nexport interface RawQuestion {\n  readonly choices: Choice[]\n  readonly text: MultilingualText\n  readonly type: QuestionType\n}\n\nfunction parse(value: RawQuestion, index: number): Question {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    choices: value.choices,\n    index: index + 1,\n    text: value.text,\n    type: value.type,\n  };\n}\n\nexport function loadQuestions(): Array<Question> {\n  const rawQuestions = questionsJson as Array<RawQuestion>;\n  console.log(`Loading ${rawQuestions.length} questions ...`);\n  const parsedQuestions = rawQuestions.map(parse);\n  console.debug(`>>> Questions::() : parsedQuestions=${JSON.stringify(parsedQuestions)}`);\n  return parsedQuestions;\n}\n","import { FormControl, MenuItem, Select, SelectChangeEvent } from '@mui/material';\nimport React from 'react';\nimport { getLanguage, languages, useLanguage } from '../../contexts/language';\n\nexport function LanguageList(): JSX.Element {\n  const { language, setLanguage } = useLanguage();\n  const handleChange = (event: SelectChangeEvent) => {\n    setLanguage(getLanguage(event.target.value));\n  };\n\n  return (\n    <FormControl>\n      <Select id=\"language-select\" onChange={handleChange} sx={{ minWidth: 120 }} value={language.code}>\n        {languages.map((value) => (\n          <MenuItem key={value.code} value={value.code}>\n            {value.text}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { AppBar, IconButton, Toolbar, Typography } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { LanguageList } from '../x-language-list/LanguageList';\nimport React from 'react';\n\nexport function TopBar(): JSX.Element {\n  return (\n    <AppBar position=\"fixed\">\n      <Toolbar>\n        <IconButton aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography sx={{ flexGrow: 1, textAlign: 'start' }} variant=\"h6\">\n          Grace Spiritual Discovery Tool\n        </Typography>\n        <LanguageList />\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport { TopBar } from '../x-topbar/TopBar';\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"App-header\">\n      <TopBar />\n      Grace Spiritual Discovery Tool\n    </header>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Questions } from './components/x-questions/Questions';\nimport { Container, Typography } from '@mui/material';\nimport { Assessment } from './components/x-assessment/Assessment';\nimport { UpdateAnswerHandler } from './types/UpdateAnswerHandler';\nimport { Question } from './types/Question';\nimport { loadQuestions } from './types/RawQuestion';\nimport { LanguageProvider } from './contexts/language';\nimport { Header } from './components/x-header/Header';\n\nconst questions = loadQuestions();\n\nfunction App(): JSX.Element {\n  const [state, setState] = useState(questions);\n\n  const handleChange: UpdateAnswerHandler = (question: Question, value: number) => {\n    console.debug(`>>> App::handleChange() : value=${value}, question=${JSON.stringify(question)}`);\n    setState((prevQuestions) => {\n      return prevQuestions.map((value1) => {\n        const copy = { ...value1 };\n        if (value1.index === question.index) {\n          copy.answer = value;\n        }\n        return copy;\n      });\n    });\n  };\n\n  return (\n    <LanguageProvider>\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Typography>Questions</Typography>\n          <Questions handleChange={handleChange} questions={state} />\n          <Assessment questions={state} />\n        </Container>\n      </div>\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@mui/material';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}