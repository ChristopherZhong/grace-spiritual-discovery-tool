{"version":3,"sources":["types/MultilingualText.ts","contexts/language.tsx","components/x-choice/Choice.tsx","components/x-choices/Choices.styles.ts","components/x-choices/Choices.tsx","components/x-question/Question.styles.tsx","components/x-question/Question.tsx","components/x-questions/Questions.tsx","components/x-stage-info/StageInfo.tsx","components/x-email-assessment-button/EmailAssessmentButton.tsx","types/AreaResult.ts","components/x-assessment/Assessment.tsx","types/Stage.ts","types/AreaScore.ts","types/RawQuestion.ts","components/x-language-list/LanguageList.styles.ts","components/x-language-list/LanguageList.tsx","components/x-topbar/TopBar.styles.ts","components/x-topbar/TopBar.tsx","components/x-header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","missing","Object","keys","first","console","warn","defaultLanguage","code","languages","getLanguage","debug","find","value","JSON","stringify","LanguageProvider","children","useState","localStorage","getItem","setLanguage","useEffect","setItem","LanguageContext","Provider","createContext","undefined","useLanguage","context","useContext","Error","Choice","choice","index","found","label","Typography","variant","points","FormControlLabel","control","Radio","useStyles","makeStyles","theme","createStyles","radioGroup","flex","Choices","handleChange","question","classes","RadioGroup","aria-label","className","name","onChange","event","Number","target","choices","map","card","cardHeader","cardHeaderTitle","fontWeight","textAlign","textTransform","formControl","formLabel","fontSize","Question","Card","CardHeader","title","titleTypographyProps","color","size","FormControl","component","required","CardContent","FormLabel","Divider","CardActions","Questions","questions","Grid","alignItems","container","direction","justify","spacing","item","zeroMinWidth","StageInfo","stage","id","foundId","description","foundDescription","foundName","align","range","min","max","mailto","body","subject","encodeURI","EmailAssessmentButton","results","s","idFound","nameFound","area","join","Button","href","rel","startIcon","Email","errorStage","finalizeResults","scores","stages","score","percentage","current","total","Math","round","filter","length","error","getStage","log","stagesJson","Assessment","Map","forEach","get","type","answer","reduce","set","Array","from","values","computeScores","components","createComponent","parse","margin","select","minWidth","LanguageList","Select","MenuItem","flexGrow","TopBar","AppBar","position","Toolbar","IconButton","Header","rawQuestions","questionsJson","parsedQuestions","loadQuestions","App","state","setState","Container","prevQuestions","value1","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"wmbAIO,SAASA,EAAQC,EAAwBC,GAC9C,IAAIC,EAASF,EAAKC,GACZE,GAAWD,EACjB,GAAIC,EAAS,CAAC,IAAD,EACKC,OAAOC,KAAKL,GAArBM,EADI,oBAEXJ,EAASF,EAAKM,GACdC,QAAQC,KAAR,eAAqBP,EAArB,gDAAqEC,EAArE,sCAAyGI,EAAzG,eAEF,MAAO,CAACJ,GAASC,G,8CCVbM,EAAkB,CACtBC,KAAM,KACNV,KAAM,WAKKW,EAAY,CACvBF,EACA,CACEC,KAAM,KACNV,KAAM,iBAIH,SAASY,EAAYF,GAC1BH,QAAQM,MAAR,mCAA0CH,IAC1C,IAAMT,EAAWU,EAAUG,MAAK,SAACC,GAAD,OAAWA,EAAML,OAASA,MAASD,EAEnE,OADAF,QAAQM,MAAR,uCAA8CG,KAAKC,UAAUhB,KACtDA,EAOF,SAASiB,EAAT,GAA6E,IAAjDC,EAAgD,EAAhDA,SAAgD,EACjDC,mBAASR,EAAYS,aAAaC,QAAQ,cADO,mBAC1ErB,EAD0E,KAChEsB,EADgE,KAE3ER,EAAQ,CAAEd,WAAUsB,eAE1B,OADAC,qBAAU,WAAQH,aAAaI,QAAQ,WAAYxB,EAASS,QAAU,CAACT,IAErE,cAACyB,EAAgBC,SAAjB,CAA0BZ,MAAOA,EAAjC,SACGI,IAUP,IAAMO,EAAkBE,6BAA+CC,GAEhE,SAASC,IACd,IAAMC,EAAUC,qBAAWN,GAC3B,QAAgBG,IAAZE,EACF,MAAM,IAAIE,MAAM,sDAElB,OAAOF,ECxCF,SAASG,EAAT,GAA8D,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,MACvBnC,EAAa6B,IAAb7B,SAD0D,EAE5CF,EAAQoC,EAAOnC,KAAMC,EAASS,MAFc,mBAE3DV,EAF2D,KAErDqC,EAFqD,KAG5DC,EAAQ,eAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,UAA6BH,EAAQ,GAAK,IAAKrC,KACvDe,EAAK,UAAMoB,EAAOM,QACxB,OACE,cAACC,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,IAETN,MAAOA,EACPvB,MAAOA,GAFFqB,G,sBCjBES,EAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXC,WAAY,CACVC,KAAM,aCQL,SAASC,EAAT,GAAyE,IAAtDC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,SAChCC,EAAUT,IAChB,OACE,cAACU,EAAA,EAAD,CACEC,aAAW,UACXC,UAAWH,EAAQL,WACnBS,KAAK,UACLC,SAAU,SAACC,GACT,IAAM7C,EAAQ8C,OAAOD,EAAME,OAAO/C,OAClCR,QAAQM,MAAR,kDAAyDwC,EAASjB,MAAlE,cAA6ErB,IAC7EqC,EAAaC,EAAUtC,IAP3B,SAUGsC,EAASU,QAAQC,KAAI,SAAC7B,EAAQC,GAC7B,OACE,cAACF,EAAD,CACEC,OAAQA,EACRC,MAAOA,GACFA,QC7BV,IAAMS,EAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXiB,KAAM,GACNC,WAAY,GACZC,gBAAiB,CACfC,WAAY,OACZC,UAAW,QACXC,cAAe,aAEjBC,YAAa,GACbC,UAAW,CACTC,SAAU,UACVL,WAAY,UACZC,UAAW,cCDV,SAASK,EAAT,GAA2E,IAAvDtB,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,SACjCC,EAAUT,IACT5C,EAAY6B,IAAZ7B,SAFwE,EAGzDF,EAAQsD,EAASrD,KAAMC,EAASS,MAHyB,mBAGxEV,EAHwE,KAGlEqC,EAHkE,KAI/E,OACE,eAACsC,EAAA,EAAD,CAAMlB,UAAWH,EAAQW,KAAzB,UACE,cAACW,EAAA,EAAD,CACEnB,UAAWH,EAAQY,WACnBW,MAAK,mBAAcxB,EAASjB,OAC5B0C,qBAAsB,CACpBrB,UAAWH,EAAQa,gBACnBY,MAAO,gBACPvC,QAAS,QACTwC,KAAM,WAGV,eAACC,EAAA,EAAD,CAAaxB,UAAWH,EAAQiB,YAAaW,UAAU,WAAWC,UAAQ,EAA1E,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAW5B,UAAWH,EAAQkB,UAAWU,UAAU,SAASC,UAAQ,EAApE,UAAsE9C,EAAQ,GAAK,IAAKrC,OAE1F,cAACoF,EAAA,EAAD,UAAa,cAACE,EAAA,EAAD,MACb,cAACF,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,UACE,cAACpC,EAAD,CACEC,aAAcA,EACdC,SAAUA,cC5BjB,SAASmC,EAAT,GAA8E,IAAzDpC,EAAwD,EAAxDA,aAAcqC,EAA0C,EAA1CA,UACxC,OACE,cAACC,EAAA,EAAD,CACEC,WAAW,UACXC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,QAAS,EALX,SAOGN,EAAUzB,KAAI,SAACX,GAAD,OACb,cAACqC,EAAA,EAAD,CAAMM,MAAI,EAAsBC,cAAY,EAA5C,SACE,cAACvB,EAAD,CACEtB,aAAcA,EAEdC,SAAUA,GADLA,EAASjB,QAHFiB,EAASjB,Y,qBCX1B,SAAS8D,EAAT,GAA4D,IAAvCC,EAAsC,EAAtCA,MAClBlG,EAAa6B,IAAb7B,SADwD,EAE1CF,EAAQoG,EAAMC,GAAInG,EAASS,MAFe,mBAEzD0F,EAFyD,KAErDC,EAFqD,OAGxBtG,EAAQoG,EAAMG,YAAarG,EAASS,MAHZ,mBAGzD4F,EAHyD,KAG5CC,EAH4C,OAItCxG,EAAQoG,EAAMzC,KAAMzD,EAASS,MAJS,mBAIzDgD,EAJyD,KAInD8C,EAJmD,KAKhE,OACE,cAAC7B,EAAA,EAAD,CAAMnC,QAAQ,WAAd,SACE,eAAC4C,EAAA,EAAD,WACE,eAAC7C,EAAA,EAAD,CACEkE,MAAM,OACN1B,MAAM,gBACNvC,QAAQ,QAHV,UAKG2D,EAAMO,MAAMC,IALf,SAK2BR,EAAMO,MAAME,IALvC,OAOA,eAACrE,EAAA,EAAD,CACEkE,MAAM,OACNjE,QAAQ,YAFV,UAIG6D,EAAU,GAAK,IAAKD,EAJvB,KAI6BI,EAAY,GAAK,IAAK9C,KAEnD,eAACnB,EAAA,EAAD,CACEkE,MAAM,OACNjE,QAAQ,QAFV,UAIG+D,EAAmB,GAAK,IAAKD,U,sBC5BxC,SAASO,EACPC,EACAC,GAEA,OAAOC,UAAU,gBAAD,OAAiBF,EAAjB,oBAAiCC,IAO5C,SAASE,EAAT,GAAsF,IAArDC,EAAoD,EAApDA,QAC9BjH,EAAa6B,IAAb7B,SACFkH,EAAID,EAAQlD,KAAI,SAAC9D,GAAY,IAAD,EACVH,EAAQG,EAAOiG,MAAMC,GAAInG,EAASS,MADxB,mBACzB0F,EADyB,KACrBgB,EADqB,OAENrH,EAAQG,EAAOiG,MAAMzC,KAAMzD,EAASS,MAF9B,mBAEzBgD,EAFyB,KAEnB2D,EAFmB,KAGhC,MAAM,GAAN,OAAUnH,EAAOoH,KAAjB,cAA2BF,EAAU,GAAK,KAA1C,OAAgDhB,EAAhD,aAAuDiB,EAAY,GAAK,KAAxE,OAA8E3D,MAE1EoD,EAAI,6EAAyEK,EAAEI,KAAK,SAC1F,OACE,cAACC,EAAA,EAAD,CACEC,KAAMZ,EACJC,EACA,+CAEFY,IAAI,sBACJC,UAAW,cAACC,EAAA,EAAD,IACX9D,OAAO,SACPtB,QAAQ,WARV,8BCnBJ,IAAMqF,EAAoB,CACxBvB,YAAa,CACX,GAAM,qBAERF,GAAI,CACF,GAAM,YAER1C,KAAM,CACJ,GAAM,cAERgD,MAAO,CACLE,KAAM,EACND,KAAM,IAeH,SAASmB,EAAgBC,EAAkCC,GAChE,OAAOD,EAAO/D,KAAI,SAACiE,GACjB,IAbkBlH,EAaZmH,GAbYnH,EAackH,EAAME,QAAUF,EAAMG,MAbVC,KAAKC,MAAc,IAARvH,IAcjDoF,EAZO,SAAC+B,EAAoBF,GACpC,IAAMO,EAASP,EAAOO,QAAO,SAACpC,GAAD,OAAWA,EAAMO,MAAMC,KAAOuB,GAAcA,GAAc/B,EAAMO,MAAME,OACnG,OAAsB,IAAlB2B,EAAOC,OACFD,EAAO,IAEhBhI,QAAQkI,MAAR,cAAqBP,EAArB,uDAA8ElH,KAAKC,UAAUsH,KACtFV,GAMSa,CAASR,EAAYF,GACnC,OAAO,2BACFC,GADL,IAEEC,WAAYA,EACZ/B,MAAOA,OC/Bb,IAAM6B,GCGJzH,QAAQoI,IAAR,kBAAuBC,EAAWJ,OAAlC,gBACOI,GDUF,SAASC,EAAT,GAAkE,IAA5CpD,EAA2C,EAA3CA,UACnBxF,EAAa6B,IAAb7B,SAEFiH,EAAUY,EEnBX,SAAuBrC,GAC5B,IAAMzB,EAAM,IAAI8E,IAUhB,OATArD,EAAUsD,SAAQ,SAAC1F,GAAc,IAAD,EAC1B4E,EAAK,UAAGjE,EAAIgF,IAAI3F,EAAS4F,aAApB,QAA6B,CAAE3B,KAAMjE,EAAS4F,KAAMd,QAAS,EAAGC,MAAO,GAChFH,EAAQ,CACNX,KAAMW,EAAMX,KACZa,QAASF,EAAME,QAAU9E,EAAS6F,OAClCd,MAAOH,EAAMG,MAAQ/E,EAASU,QAAQoF,QAAO,SAACvC,EAAKzE,GAAN,OAAiBkG,KAAKzB,IAAIA,EAAKzE,EAAOM,UAAS,IAE9FuB,EAAIoF,IAAI/F,EAAS4F,KAAMhB,MAElBoB,MAAMC,KAAKtF,EAAIuF,UFOPC,CAAc/D,GACWuC,GAClCyB,EAhBR,SAAyBvC,EAAoCjH,GAC3D,OAAOiH,EAAQlD,KAAI,SAAC9D,EAAQkC,GAC1B7B,QAAQM,MAAR,mDAA0DuB,EAA1D,oBAA2EpB,KAAKC,UAAUf,KADtD,MAEdH,EAAQG,EAAOiG,MAAMzC,KAAMzD,GAFb,mBAE7BD,EAF6B,KAEvBqC,EAFuB,KAGpC,MAAM,GAAN,OAAUnC,EAAOoH,KAAjB,aAA0BpH,EAAOiI,QAAjC,cAA8CjI,EAAOkI,MAArD,cAAgElI,EAAOgI,WAAvE,cAAuF7F,EAAQ,GAAK,KAApG,OAA0GrC,MAYzF0J,CAAgBxC,EAASjH,EAASS,MACrD,OACE,eAACiE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,MAAM,uBAClB,eAACO,EAAA,EAAD,WACE,6BACGqE,EAAWzF,KAAI,SAACjD,EAAOqB,GAAR,OAAkB,6BAAiBrB,GAARqB,QAE5C4F,EAAOhE,KAAI,SAACmC,EAAO/D,GAAR,OAAkB,cAAC8D,EAAD,CAAuBC,MAAOA,GAAd/D,SAEhD,cAACmD,EAAA,EAAD,UACE,cAAC0B,EAAD,CAAuBC,QAASA,S,YG5BxC,SAASyC,EAAM5I,EAAoBqB,GAEjC,OADA7B,QAAQM,MAAR,oCAA2CuB,EAA3C,mBAA2DpB,KAAKC,UAAUF,KACnE,CACLmI,OAAQ,EACRnF,QAAShD,EAAMgD,QACf3B,MAAOA,EAAQ,EACfpC,KAAMe,EAAMf,KACZiJ,KAAMlI,EAAMkI,M,qECjBHpG,GAAYC,aAAW,SAACC,GAAD,OAAkBC,YAAa,CAC/DuB,YAAa,CACXqF,OAAQ7G,EAAMgD,QAAQ,IAExB8D,OAAQ,CACN9E,MAAO,QACP+E,SAAU,UCHT,SAASC,KACd,IAAMzG,EAAUT,KAD0B,EAERf,IAA1B7B,EAFkC,EAElCA,SAAUsB,EAFwB,EAExBA,YAGlB,OACE,cAAC0D,EAAA,EAAD,CAAaxB,UAAWH,EAAQiB,YAAhC,SACE,cAACyF,GAAA,EAAD,CACEvG,UAAWH,EAAQuG,OACnBzD,GAAG,kBACHzC,SAPe,SAACC,GAA6CrC,EAAYX,EAAYgD,EAAME,OAAO/C,SAQlGA,MAAOd,EAASS,KAJlB,SAMGC,EAAUqD,KAAI,SAACjD,GAAD,OACb,cAACkJ,GAAA,EAAD,CAA2BlJ,MAAOA,EAAML,KAAxC,SAA+CK,EAAMf,MAAtCe,EAAML,aCjBxB,IAAMmC,GAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACX6B,MAAO,CACLqF,SAAU,EACV7F,UAAW,cCAV,SAAS8F,KACd,IAAM7G,EAAUT,KAEhB,OACE,cAACuH,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAY/G,aAAW,OAAvB,SAA8B,cAAC,KAAD,MAC9B,cAACjB,EAAA,EAAD,CAAYkB,UAAWH,EAAQuB,MAAOrC,QAAQ,KAA9C,4CACA,cAACuH,GAAD,SCXD,SAASS,KACd,OACE,yBAAQ/G,UAAU,aAAlB,UACE,cAAC0G,GAAD,IADF,oCCMJ,IAAM1E,GNYC,WACL,IAAMgF,EAAeC,EACrBnK,QAAQoI,IAAR,kBAAuB8B,EAAajC,OAApC,mBACA,IAAMmC,EAAkBF,EAAazG,IAAI2F,GAEzC,OADApJ,QAAQM,MAAR,8CAAqDG,KAAKC,UAAU0J,KAC7DA,EMjBSC,GAgCHC,OA9Bf,WAA6B,IAAD,EACAzJ,mBAASqE,IADT,mBACnBqF,EADmB,KACZC,EADY,KAgB1B,OACE,cAAC7J,EAAD,UACE,sBAAKuC,UAAU,MAAf,UACE,cAAC+G,GAAD,IACA,eAACQ,EAAA,EAAD,WACE,cAACzI,EAAA,EAAD,wBACA,cAACiD,EAAD,CAAWpC,aAnBuB,SAACC,EAAoBtC,GAC7DR,QAAQM,MAAR,0CAAiDE,EAAjD,sBAAoEC,KAAKC,UAAUoC,KACnF0H,GAAS,SAACE,GACR,OAAOA,EAAcjH,KAAI,SAACkH,GACxB,IAAMC,EAAI,eAAQD,GAIlB,OAHIA,EAAO9I,QAAUiB,EAASjB,QAC5B+I,EAAKjC,OAASnI,GAEToK,SAWkC1F,UAAWqF,IAClD,cAACjC,EAAD,CAAYpD,UAAWqF,aCtBlBM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,UCFdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,GAAA,EAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,SAM1Bd,GAAgB7K,QAAQoI,O","file":"static/js/main.f642cb05.chunk.js","sourcesContent":["export interface MultilingualText {\n  readonly [language: string]: string;\n}\n\nexport function getText(text: MultilingualText, language: string): [string, boolean] {\n  let result = text[language];\n  const missing = !result;\n  if (missing) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return [result, !missing];\n}\n","import React, { createContext, Dispatch, ReactNode, SetStateAction, useContext, useEffect, useState } from 'react';\n\nconst defaultLanguage = {\n  code: 'en',\n  text: 'English',\n};\n\nexport type Language = typeof defaultLanguage;\n\nexport const languages = [\n  defaultLanguage,\n  {\n    code: 'zh',\n    text: '中文',\n  },\n];\n\nexport function getLanguage(code: string | unknown): Language {\n  console.debug(`>>> getLanguage() : code=${code}`);\n  const language = languages.find((value) => value.code === code) || defaultLanguage;\n  console.debug(`>>> getLanguage() : language=${JSON.stringify(language)}`)\n  return language;\n}\n\ninterface LanguageProviderProps {\n  children: ReactNode\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps): JSX.Element {\n  const [language, setLanguage] = useState(getLanguage(localStorage.getItem('language')));\n  const value = { language, setLanguage };\n  useEffect(() => { localStorage.setItem('language', language.code); }, [language]);\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: Dispatch<SetStateAction<Language>>;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function useLanguage(): LanguageContextType {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","import React from 'react';\nimport { Choice as IChoice } from '../../types/Choice';\nimport { getText } from '../../types/MultilingualText';\nimport { FormControlLabel, Radio, Typography } from '@material-ui/core';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface ChoiceProps {\n  readonly choice: IChoice;\n  readonly index: number;\n}\n\nexport function Choice({ choice, index }: ChoiceProps): JSX.Element {\n  const { language } = useLanguage();\n  const [text, found] = getText(choice.text, language.code);\n  const label = <Typography variant='body2'>{found ? '' : '*'}{text}</Typography>;\n  const value = `${choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={index}\n      label={label}\n      value={value}\n    />\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    radioGroup: {\n      flex: 'auto',\n    },\n  }),\n);\n","import React from 'react';\nimport { RadioGroup } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Choice } from '../x-choice/Choice';\nimport { Question } from '../../types/Question';\nimport { useStyles } from './Choices.styles';\n\nexport interface ChoicesProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly question: Question;\n}\n\nexport function Choices({ handleChange, question }: ChoicesProps): JSX.Element {\n  const classes = useStyles();\n  return (\n    <RadioGroup\n      aria-label='choices'\n      className={classes.radioGroup}\n      name='choices'\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const value = Number(event.target.value);\n        console.debug(`>>> Choices::onChange(): question.index=${question.index} : ${value}`);\n        handleChange(question, value);\n      }}\n    >\n      {question.choices.map((choice, index) => {\n        return (\n          <Choice\n            choice={choice}\n            index={index}\n            key={index}\n          />\n        );\n      })}\n    </RadioGroup>\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {},\n    cardHeader: {},\n    cardHeaderTitle: {\n      fontWeight: 'bold',\n      textAlign: 'start',\n      textTransform: 'uppercase',\n    },\n    formControl: {},\n    formLabel: {\n      fontSize: 'x-large',\n      fontWeight: 'lighter',\n      textAlign: 'start',\n    },\n  }),\n);\n","import React from 'react';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Card, CardActions, CardContent, CardHeader, Divider, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../../types/MultilingualText';\nimport { Choices } from '../x-choices/Choices';\nimport { useStyles } from './Question.styles';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface QuestionProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly question: IQuestion;\n}\n\nexport function Question({ handleChange, question }: QuestionProps): JSX.Element {\n  const classes = useStyles();\n  const {language} = useLanguage();\n  const [text, found] = getText(question.text, language.code);\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        className={classes.cardHeader}\n        title={`Question ${question.index}`}\n        titleTypographyProps={{\n          className: classes.cardHeaderTitle,\n          color: 'textSecondary',\n          variant: 'body2',\n          size: 'small',\n        }}\n      />\n      <FormControl className={classes.formControl} component='fieldset' required>\n        <CardContent>\n          <FormLabel className={classes.formLabel} component='legend' required>{found ? '' : '*'}{text}</FormLabel>\n        </CardContent>\n        <CardContent><Divider/></CardContent>\n        <CardContent>\n          <CardActions>\n            <Choices\n              handleChange={handleChange}\n              question={question}\n            />\n          </CardActions>\n        </CardContent>\n      </FormControl>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Question } from '../x-question/Question';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\n\nexport interface QuestionsProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly questions: ReadonlyArray<IQuestion>;\n}\n\nexport function Questions({ handleChange, questions }: QuestionsProps): JSX.Element {\n  return (\n    <Grid\n      alignItems='stretch'\n      container\n      direction='column'\n      justify='center'\n      spacing={2}\n    >\n      {questions.map((question) =>\n        <Grid item key={question.index} zeroMinWidth>\n          <Question\n            handleChange={handleChange}\n            key={question.index}\n            question={question}\n          />\n        </Grid>)}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { getText } from '../../types/MultilingualText';\nimport { Stage } from '../../types/Stage';\nimport { useLanguage } from '../../contexts/language';\n\nexport interface StageInfoProps {\n  readonly stage: Stage\n}\n\nexport function StageInfo({ stage }: StageInfoProps): JSX.Element {\n  const { language } = useLanguage();\n  const [id, foundId] = getText(stage.id, language.code);\n  const [description, foundDescription] = getText(stage.description, language.code);\n  const [name, foundName] = getText(stage.name, language.code);\n  return (\n    <Card variant='outlined'>\n      <CardContent>\n        <Typography\n          align='left'\n          color='textSecondary'\n          variant='body2'\n        >\n          {stage.range.min}&ndash;{stage.range.max}%\n        </Typography>\n        <Typography\n          align='left'\n          variant='subtitle1'\n        >\n          {foundId ? '' : '*'}{id}: {foundName ? '' : '*'}{name}\n        </Typography>\n        <Typography\n          align='left'\n          variant='body2'\n        >\n          {foundDescription ? '' : '*'}{description}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Email } from '@material-ui/icons';\nimport { AreaResult } from '../../types/AreaResult';\nimport { getText } from '../../types/MultilingualText';\nimport { useLanguage } from '../../contexts/language';\n\nfunction mailto(\n  body: string,\n  subject: string,\n): string {\n  return encodeURI(`mailto:?body=${body}&subject=${subject}`);\n}\n\nexport interface EmailAssessmentButtonProps {\n  readonly results: ReadonlyArray<AreaResult>\n}\n\nexport function EmailAssessmentButton({ results }: EmailAssessmentButtonProps): JSX.Element {\n  const { language } = useLanguage();\n  const s = results.map((result) => {\n    const [id, idFound] = getText(result.stage.id, language.code);\n    const [name, nameFound] = getText(result.stage.name, language.code);\n    return `${result.area} : ${idFound ? '' : '*'}${id}: ${nameFound ? '' : '*'}${name}`;\n  });\n  const body = `Here is the assessment from the Grace Spiritual Discovery Tool.\\n- ${s.join('\\n- ')}`;\n  return (\n    <Button\n      href={mailto(\n        body,\n        'Grace Spiritual Discovery Tool - Assessment',\n      )}\n      rel='noopener noreferrer'\n      startIcon={<Email/>}\n      target='_blank'\n      variant='outlined'\n    >\n      Email Assessment\n    </Button>\n  );\n}\n","import { Stage } from './Stage';\nimport { AreaScore } from './AreaScore';\n\nexport interface AreaResult extends AreaScore {\n  readonly percentage: number\n  readonly stage: Stage\n}\n\nconst errorStage: Stage = {\n  description: {\n    'en': 'Error Description',\n  },\n  id: {\n    'en': 'Error ID',\n  },\n  name: {\n    'en': 'Error Name',\n  },\n  range: {\n    max: -1,\n    min: -1,\n  },\n};\n\nconst toPercentage = (value: number): number => Math.round(value * 100);\n\nconst getStage = (percentage: number, stages: ReadonlyArray<Stage>): Stage => {\n  const filter = stages.filter((stage) => stage.range.min <= percentage && percentage <= stage.range.max);\n  if (filter.length === 1) {\n    return filter[0];\n  }\n  console.error(`The ${percentage} percentage resulted in an unexpected list: ${JSON.stringify(filter)}`);\n  return errorStage;\n};\n\nexport function finalizeResults(scores: ReadonlyArray<AreaScore>, stages: ReadonlyArray<Stage>): ReadonlyArray<AreaResult> {\n  return scores.map((score) => {\n    const percentage = toPercentage(score.current / score.total);\n    const stage = getStage(percentage, stages);\n    return {\n      ...score,\n      percentage: percentage,\n      stage: stage,\n    };\n  });\n}\n","import React from 'react';\nimport { Card, CardActions, CardContent, CardHeader } from '@material-ui/core';\nimport { Question } from '../../types/Question';\nimport { loadStages } from '../../types/Stage';\nimport { getText } from '../../types/MultilingualText';\nimport { StageInfo } from '../x-stage-info/StageInfo';\nimport { EmailAssessmentButton } from '../x-email-assessment-button/EmailAssessmentButton';\nimport { computeScores } from '../../types/AreaScore';\nimport { AreaResult, finalizeResults } from '../../types/AreaResult';\nimport { useLanguage } from '../../contexts/language';\n\nconst stages = loadStages();\n\nfunction createComponent(results: ReadonlyArray<AreaResult>, language: string): ReadonlyArray<string> {\n  return results.map((result, index) => {\n    console.debug(`>>> Assessment::createComponent(): index=${index}, result=${JSON.stringify(result)}`);\n    const [text, found] = getText(result.stage.name, language);\n    return `${result.area}: ${result.current} / ${result.total} : ${result.percentage}%: ${found ? '' : '*'}${text}`;\n  });\n}\n\nexport interface AssessmentProps {\n  readonly questions: ReadonlyArray<Question>;\n}\n\nexport function Assessment({ questions }: AssessmentProps): JSX.Element {\n  const { language } = useLanguage();\n  const scores = computeScores(questions);\n  const results = finalizeResults(scores, stages);\n  const components = createComponent(results, language.code);\n  return (\n    <Card>\n      <CardHeader title='Assessment Results'/>\n      <CardContent>\n        <ol>\n          {components.map((value, index) => <li key={index}>{value}</li>)}\n        </ol>\n        {stages.map((stage, index) => <StageInfo key={index} stage={stage}/>)}\n      </CardContent>\n      <CardActions>\n        <EmailAssessmentButton results={results}/>\n      </CardActions>\n    </Card>\n  );\n}\n","import { MultilingualText } from './MultilingualText';\nimport stagesJson from '../assets/stages.json';\n\nexport interface Stage {\n  readonly description: MultilingualText\n  readonly id: MultilingualText\n  readonly name: MultilingualText\n  readonly range: {\n    readonly min: number\n    readonly max: number\n  }\n}\n\nexport function loadStages(): ReadonlyArray<Stage> {\n  console.log(`Loading ${stagesJson.length} stages ...`);\n  return stagesJson;\n}\n","import { QuestionType } from './QuestionType';\nimport { Question } from './Question';\n\nexport interface AreaScore {\n  readonly area: QuestionType\n  readonly current: number\n  readonly total: number\n}\n\nexport function computeScores(questions: ReadonlyArray<Question>): ReadonlyArray<AreaScore> {\n  const map = new Map<QuestionType, AreaScore>();\n  questions.forEach((question) => {\n    let score = map.get(question.type) ?? { area: question.type, current: 0, total: 0 };\n    score = {\n      area: score.area,\n      current: score.current + question.answer,\n      total: score.total + question.choices.reduce((max, choice) => Math.max(max, choice.points), 0),\n    };\n    map.set(question.type, score);\n  });\n  return Array.from(map.values());\n}\n","import { MultilingualText } from './MultilingualText';\nimport { QuestionType } from './QuestionType';\nimport { Choice } from './Choice';\nimport questionsJson from '../assets/questions.json';\nimport { Question } from './Question';\n\nexport interface RawQuestion {\n  readonly choices: Choice[]\n  readonly text: MultilingualText\n  readonly type: QuestionType\n}\n\nfunction parse(value: RawQuestion, index: number): Question {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    choices: value.choices,\n    index: index + 1,\n    text: value.text,\n    type: value.type,\n  };\n}\n\nexport function loadQuestions(): Array<Question> {\n  const rawQuestions = questionsJson as Array<RawQuestion>;\n  console.log(`Loading ${rawQuestions.length} questions ...`);\n  const parsedQuestions = rawQuestions.map(parse);\n  console.debug(`>>> Questions::() : parsedQuestions=${JSON.stringify(parsedQuestions)}`);\n  return parsedQuestions;\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n    },\n    select: {\n      color: 'white',\n      minWidth: 120,\n    },\n  }),\n);\n","import { FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { ChangeEvent } from 'react';\nimport { useStyles } from './LanguageList.styles';\nimport { getLanguage, languages, useLanguage } from '../../contexts/language';\n\nexport function LanguageList(): JSX.Element {\n  const classes = useStyles();\n  const { language, setLanguage } = useLanguage();\n  const handleChange = (event: ChangeEvent<{ value: unknown }>) => { setLanguage(getLanguage(event.target.value)); };\n\n  return (\n    <FormControl className={classes.formControl}>\n      <Select\n        className={classes.select}\n        id='language-select'\n        onChange={handleChange}\n        value={language.code}\n      >\n        {languages.map((value) => (\n          <MenuItem key={value.code} value={value.code}>{value.text}</MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n      textAlign: 'start',\n    },\n  }),\n);\n","import { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { LanguageList } from '../x-language-list/LanguageList';\nimport React from 'react';\nimport { useStyles } from './TopBar.styles';\n\nexport function TopBar(): JSX.Element {\n  const classes = useStyles();\n\n  return (\n    <AppBar position='fixed'>\n      <Toolbar>\n        <IconButton aria-label='menu'><MenuIcon/></IconButton>\n        <Typography className={classes.title} variant=\"h6\">Grace Spiritual Discovery Tool</Typography>\n        <LanguageList/>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport { TopBar } from '../x-topbar/TopBar';\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"App-header\">\n      <TopBar />\n      Grace Spiritual Discovery Tool\n    </header>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Questions } from './components/x-questions/Questions';\nimport { Container, Typography } from '@material-ui/core';\nimport { Assessment } from './components/x-assessment/Assessment';\nimport { UpdateAnswerHandler } from './types/UpdateAnswerHandler';\nimport { Question } from './types/Question';\nimport { loadQuestions } from './types/RawQuestion';\nimport { LanguageProvider } from './contexts/language';\nimport { Header } from './components/x-header/Header';\n\nconst questions = loadQuestions();\n\nfunction App(): JSX.Element {\n  const [state, setState] = useState(questions);\n\n  const handleChange: UpdateAnswerHandler = (question: Question, value: number) => {\n    console.debug(`>>> App::handleChange() : value=${value}, question=${JSON.stringify(question)}`);\n    setState((prevQuestions) => {\n      return prevQuestions.map((value1) => {\n        const copy = { ...value1 };\n        if (value1.index === question.index) {\n          copy.answer = value;\n        }\n        return copy;\n      });\n    });\n  };\n\n  return (\n    <LanguageProvider>\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Typography>Questions</Typography>\n          <Questions handleChange={handleChange} questions={state} />\n          <Assessment questions={state} />\n        </Container>\n      </div>\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}