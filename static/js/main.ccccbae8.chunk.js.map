{"version":3,"sources":["types/MultilingualText.ts","components/x-choice/Choice.tsx","components/x-choices/Choices.tsx","components/x-question/Question.tsx","components/x-questions/Questions.tsx","components/x-results/Results.tsx","types/Stage.ts","types/RawQuestion.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","missing","Object","keys","first","console","warn","Choice","props","choice","found","label","Typography","variant","labelPlacement","value","points","FormControlLabel","control","Radio","index","Choices","handleChange","question","RadioGroup","aria-label","name","onChange","event","Number","target","debug","row","choices","map","Question","Card","CardHeader","title","FormControl","required","CardContent","FormLabel","CardActionArea","CardActions","Questions","questions","Grid","alignItems","container","direction","justify","spacing","item","zeroMinWidth","stages","log","stagesJson","length","Results","Map","forEach","score","get","type","undefined","current","total","answer","reduce","max","Math","set","results","key","push","toFixed","toPercent","toStage","align","color","range","min","id","description","parse","JSON","stringify","rawQuestions","questionsJson","parsedQuestions","loadQuestions","App","useState","state","setState","className","Container","prevQuestions","value1","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ccccbae8.chunk.js","sourcesContent":["export interface MultilingualText {\n  readonly [language: string]: string;\n}\n\nexport function getText(text: MultilingualText, language: string): [string, boolean] {\n  let result = text[language];\n  const missing = !result;\n  if (missing) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return [result, !missing];\n}\n","import { Choice as IChoice } from '../../types/Choice';\nimport { getText } from '../../types/MultilingualText';\nimport { FormControlLabel, Radio, Typography } from '@material-ui/core';\n\nexport interface ChoiceProps {\n  choice: IChoice;\n  index: number;\n  labelPlacement?: 'end' | 'start' | 'top' | 'bottom';\n  language: string;\n}\n\nexport function Choice(props: ChoiceProps): JSX.Element {\n  const [text, found] = getText(props.choice.text, props.language);\n  const label = <Typography variant='body2'>{found ? '' : '*'}{text}</Typography>;\n  const labelPlacement = props.labelPlacement?? 'top';\n  const value = `${props.choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={props.index}\n      label={label}\n      labelPlacement={labelPlacement}\n      value={value}\n    />\n  );\n}\n","import { RadioGroup } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Choice } from '../x-choice/Choice';\nimport { Question } from '../../types/Question';\n\nexport interface ChoicesProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: Question;\n}\n\nexport function Choices(props: ChoicesProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  return (\n    <RadioGroup\n      aria-label='choices'\n      name='choices'\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const value: number = Number(event.target.value);\n        console.debug(`>>> Choices::onChange(): question.index=${question.index} : ${value}`);\n        handleChange(question, value);\n      }}\n      row\n    >\n      {question.choices.map((choice, index) => {\n        return (\n          <Choice\n            choice={choice}\n            index={index}\n            key={index}\n            language={language}\n          />\n        );\n      })}\n    </RadioGroup>\n  );\n}\n","import { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../../types/MultilingualText';\nimport { Choices } from '../x-choices/Choices';\n\nexport interface QuestionProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: IQuestion;\n}\n\nexport function Question(props: QuestionProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  const [text, found] = getText(question.text, language);\n  return (\n    <Card>\n      <CardHeader title={`Question ${question.index}.`}/>\n      <FormControl required>\n        <CardContent>\n          <FormLabel required>{found ? '' : '*'}{text}</FormLabel>\n        </CardContent>\n        <CardActionArea>\n          <CardActions>\n            <Choices\n              language={language}\n              handleChange={handleChange}\n              question={question}\n            />\n          </CardActions>\n        </CardActionArea>\n      </FormControl>\n    </Card>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Question } from '../x-question/Question';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\n\nexport interface QuestionsProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questions: Array<IQuestion>;\n}\n\nexport function Questions(props: QuestionsProps): JSX.Element {\n  const { handleChange, language, questions } = props;\n  return (\n    <Grid\n      alignItems='stretch'\n      container\n      direction='column'\n      justify='center'\n      spacing={2}\n    >\n      {questions.map((question) =>\n        <Grid item key={question.index} zeroMinWidth>\n          <Question\n            handleChange={handleChange}\n            key={question.index}\n            language={language}\n            question={question}\n          />\n        </Grid>)}\n    </Grid>\n  );\n}\n","import { Card, CardContent, CardHeader, Typography } from '@material-ui/core';\nimport { QuestionType } from '../../types/QuestionType';\nimport { Question } from '../../types/Question';\nimport { loadStages } from '../../types/Stage';\nimport { getText } from '../../types/MultilingualText';\n\nexport interface ResultsProps {\n  language: string\n  questions: Array<Question>;\n}\n\ninterface Score {\n  current: number\n  total: number\n}\n\nconst toPercent = (value: number): string => `${(value * 100).toFixed(2)}%`;\n\nfunction toStage(value: number): string {\n  if (value < .26)\n    return 'Exploring Christ';\n  if (value < .51)\n    return 'Growing in Christ';\n  if (value < .76)\n    return 'Close to Christ';\n  return 'Christ-Centred';\n}\n\nconst stages = loadStages();\n\nexport function Results(props: ResultsProps): JSX.Element {\n  const { language, questions } = props;\n  const map = new Map<QuestionType, Score>();\n  questions.forEach((value) => {\n    let score = map.get(value.type);\n    if (score === undefined) {\n      score = {\n        current: 0,\n        total: 0,\n      };\n    }\n    score.current += value.answer;\n    score.total += value.choices.reduce((max, choice) => Math.max(max, choice.points), 0);\n    map.set(value.type, score);\n  });\n  const results: Array<string> = [];\n  map.forEach((value, key) => {\n    console.log(`>>> type=${key}, value=${value}`);\n    const score = value.current / value.total;\n    results.push(`${key} : ${value.current} / ${value.total} : ${toPercent(score)}: ${toStage(score)}`);\n  });\n  return (\n    <Card>\n      <CardHeader title='Assessment Results'/>\n      <CardContent>\n        <ol>\n          {results.map((value, index) => <li key={index}>{value}</li>)}\n        </ol>\n        {stages.map((value, index) => (\n          <Card\n            key={index}\n            variant='outlined'\n          >\n            <CardContent>\n              <Typography\n                align='left'\n                color='textSecondary'\n                variant='body2'\n              >\n                {value.range.min}&ndash;{value.range.max}%\n              </Typography>\n              <Typography\n                align='left'\n                variant='subtitle1'\n              >\n                {getText(value.id, language)}: {getText(value.name, language)}\n              </Typography>\n              <Typography\n                align='left'\n                variant='body2'\n              >\n                {getText(value.description, language)}\n              </Typography>\n            </CardContent>\n          </Card>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n","import { MultilingualText } from './MultilingualText';\nimport stagesJson from '../assets/stages.json';\n\nexport interface Stage {\n  readonly description: MultilingualText\n  readonly id: MultilingualText\n  readonly name: MultilingualText\n  readonly range: {\n    readonly min: number\n    readonly max: number\n  }\n}\n\nexport function loadStages(): ReadonlyArray<Stage> {\n  console.log(`Loading ${stagesJson.length} stages ...`);\n  return stagesJson;\n}\n","import { MultilingualText } from './MultilingualText';\nimport { QuestionType } from './QuestionType';\nimport { Choice } from './Choice';\nimport questionsJson from '../assets/questions.json';\nimport { Question } from './Question';\n\nexport interface RawQuestion {\n  readonly choices: Choice[]\n  readonly text: MultilingualText\n  readonly type: QuestionType\n}\n\nfunction parse(value: RawQuestion, index: number): Question {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    choices: value.choices,\n    index: index + 1,\n    text: value.text,\n    type: value.type,\n  };\n}\n\nexport function loadQuestions(): Array<Question> {\n  const rawQuestions = questionsJson as Array<RawQuestion>;\n  console.log(`Loading ${rawQuestions.length} questions ...`);\n  const parsedQuestions = rawQuestions.map(parse);\n  console.debug(`>>> Questions::() : parsedQuestions=${JSON.stringify(parsedQuestions)}`);\n  return parsedQuestions;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Questions } from './components/x-questions/Questions';\nimport { Container, Typography } from '@material-ui/core';\nimport { Results } from './components/x-results/Results';\nimport { UpdateAnswerHandler } from './types/UpdateAnswerHandler';\nimport { Question } from './types/Question';\nimport { loadQuestions } from './types/RawQuestion';\n\nconst questions = loadQuestions();\n\nfunction App() {\n  const [language] = useState('en');\n  const [state, setState] = useState(questions);\n\n  const handleChange: UpdateAnswerHandler = (question: Question, value: number) => {\n    console.log(`>>> Questions::handleChange() : question=${JSON.stringify(question)}`);\n    console.log(`>>> Questions::handleChange() : value=${value}`);\n    setState((prevQuestions) => {\n      return prevQuestions.map((value1) => {\n        const copy = { ...value1 };\n        if (value1.index === question.index) {\n          copy.answer = value;\n        }\n        return copy;\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Grace Spiritual Discovery Tool\n      </header>\n      <Container>\n        <Typography>Questions</Typography>\n        <Questions\n          handleChange={handleChange}\n          language={language}\n          questions={state}\n        />\n        <Results\n          language={language}\n          questions={state}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}