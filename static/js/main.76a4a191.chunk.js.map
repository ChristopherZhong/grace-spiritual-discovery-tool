{"version":3,"sources":["types/Text.ts","components/ChoiceRadio.tsx","components/Choices.tsx","components/QuestionCard.tsx","components/Questions.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","Object","keys","first","console","warn","ChoiceRadio","props","choice","label","Typography","variant","value","points","FormControlLabel","control","Radio","labelPlacement","index","Choices","choices","handleChange","questionIndex","questionType","RadioGroup","aria-label","name","onChange","event","debug","target","Number","row","map","QuestionCard","question","Card","CardHeader","title","FormControl","required","CardContent","FormLabel","CardActionArea","CardActions","type","questions","questionsJson","parse","JSON","stringify","answer","Questions","log","length","initialState","useState","state","setState","prevState","Grid","alignItems","container","direction","justify","spacing","item","zeroMinWidth","App","className","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.76a4a191.chunk.js","sourcesContent":["export interface Text {\n  [language: string]: string;\n}\n\nexport function getText(text: Text, language: string): string {\n  let result = text[language];\n  if (!result) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return result;\n}\n","import { Choice } from '../types/Choice';\nimport { getText } from '../types/Text';\nimport { FormControlLabel, Radio, Typography } from '@material-ui/core';\n\ninterface ChoiceProps {\n  choice: Choice;\n  index: number;\n  language: string;\n}\n\nexport function ChoiceRadio(props: ChoiceProps): JSX.Element {\n  const text = getText(props.choice.text, props.language);\n  const label = <Typography variant='body2'>{text}</Typography>;\n  const value = `${props.choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={props.index}\n      label={label}\n      labelPlacement='top'\n      value={value}\n    />\n  );\n}\n","import { Choice } from '../types/Choice';\nimport { RadioGroup } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { QuestionType } from '../types/QuestionType';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { ChoiceRadio } from './ChoiceRadio';\n\ninterface ChoicesProps {\n  choices: Array<Choice>;\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questionType: QuestionType;\n  questionIndex: number;\n}\n\nexport function Choices(props: ChoicesProps): JSX.Element {\n  const { choices, handleChange, language, questionIndex, questionType } = props;\n  const mapChoice = (choice: Choice, index: number) => (\n    <ChoiceRadio\n      choice={choice}\n      index={index}\n      key={index}\n      language={language}\n    />\n  );\n  return (\n    <RadioGroup\n      aria-label='choices'\n      name='choices'\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        console.debug(`>>> Choices::onChange(): index=${questionIndex} : ${event.target.value}`);\n        handleChange(questionType, questionIndex, Number(event.target.value));\n      }}\n      row\n    >\n      {choices.map(mapChoice)}\n    </RadioGroup>\n  );\n}\n","import { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../types/Text';\nimport { Choices } from './Choices';\n\ninterface QuestionCardProps {\n  // getScore: GetScore;\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: ParsedQuestion;\n}\n\nexport function QuestionCard(props: QuestionCardProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  return (\n    <Card>\n      <CardHeader title={`Question ${question.index}.`}/>\n      <FormControl required>\n        <CardContent>\n          <FormLabel required>{getText(question.question.text, language)}</FormLabel>\n        </CardContent>\n        <CardActionArea>\n          <CardActions>\n            <Choices\n              choices={question.question.choices}\n              language={language}\n              handleChange={handleChange}\n              questionType={question.question.type}\n              questionIndex={question.index}\n            />\n          </CardActions>\n        </CardActionArea>\n      </FormControl>\n    </Card>\n  );\n}\n","import questionsJson from '../questions.json';\nimport { Question } from '../types/Question';\nimport { QuestionType } from '../types/QuestionType';\nimport { useState } from 'react';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { Grid } from '@material-ui/core';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\nimport { QuestionCard } from './QuestionCard';\n\nconst questions = questionsJson as Array<Question>;\n\ninterface QuestionsState {\n  questions: Array<ParsedQuestion>;\n}\n\n// function sum(previousValue: number, currentValue: number): number {\n//   return previousValue + currentValue;\n// }\n\nfunction parse(value: Question, index: number) {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    index: index + 1,\n    question: value,\n  };\n}\n\nexport function Questions(): JSX.Element {\n  console.log(`Loading ${questions.length} questions ...`);\n  let initialState: QuestionsState = {\n    questions: questions.map(parse),\n  };\n  console.debug(`>>> Questions::() : initialState=${JSON.stringify(initialState)}`);\n\n  let [state, setState] = useState<QuestionsState>(initialState);\n\n  // let getScore: GetScore = (questionType: QuestionType) => {\n  //   console.debug(`>>> Questions::getScore() : questionType=${questionType}`);\n  //   state.questions.filter((value, index) => value.question.type === questionType);\n  //   // const score = state.scoreByType.get(questionType);\n  //   // if (score === undefined) {\n  //   //   console.warn(`Something went wrong! get(${questionType}) should return a number`);\n  //   //   return 0;\n  //   // }\n  //   // console.debug(`>>> Questions::getScore() : score=${score}`);\n  //   return 0;\n  // };\n\n  let handleChange: UpdateAnswerHandler = (questionType: QuestionType, questionIndex: number, value: number) => {\n    console.debug(`>>> Questions::handleChange() : questionType=${questionType}, questionIndex=${questionIndex}, value=${value}`);\n    setState(prevState => {\n      return prevState;\n    });\n    // let answers: Array<number> | undefined = state.answersByType.get(questionType);\n    // if (answers === undefined) {\n    //   console.warn(`Something went wrong! 'get(${questionType})' should return an array`);\n    //   return;\n    // }\n    // console.debug(`>>> Questions::handleChange() : BEFORE: questionType=${questionType}, answers=${answers}`);\n    // answers = answers.map((current, index) => index === questionIndex ? value : current);\n    // console.debug(`>>> Questions::handleChange() :  AFTER: questionType=${questionType}, answers=${answers}`);\n    //\n    // const score = answers.reduce(sum, 0);\n    // console.debug(`>>> Questions::handleChange() : score=${score}`);\n    //\n    // const state: QuestionsState = {\n    //   ...state,\n    //   answersByType: new Map(state.answersByType).set(questionType, answers),\n    //   scoreByType: new Map(state.scoreByType).set(questionType, score),\n    // };\n    // console.debug(`>>> Questions::handleChange() : state=${JSON.stringify(state)}`);\n    //\n    // console.debug(`>>> Questions::handleChange() : BEFORE: ${JSON.stringify(state)}`);\n    // setState(state);\n    // console.debug(`>>> Questions::handleChange() :  AFTER: ${JSON.stringify(state)}`);\n  };\n\n  return (\n    <Grid\n      alignItems='stretch'\n      container\n      direction='column'\n      justify='center'\n      spacing={5}\n    >\n      {state.questions.map((value) =>\n        <Grid item key={value.index} zeroMinWidth>\n          <QuestionCard\n            // getScore={getScore}\n            handleChange={handleChange}\n            key={value.index}\n            language={'en'}\n            question={value}\n          />\n        </Grid>)}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Questions } from './components/Questions';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Grace Spiritual Discovery Tool\n      </header>\n      <Container>\n        <Questions/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}