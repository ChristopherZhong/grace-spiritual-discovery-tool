{"version":3,"sources":["types/QuestionType.ts","types/Text.ts","components/Choices.tsx","components/QuestionForm.tsx","components/QuestionsList.tsx","components/QuestionsCard.tsx","components/Questions.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionType","getText","text","language","result","Object","keys","first","console","warn","Choices","this","props","choices","handleChange","questionIndex","questionType","RadioGroup","aria-label","name","onChange","event","log","target","value","Number","row","map","choice","index","label","Typography","variant","points","FormControlLabel","control","Radio","labelPlacement","ChoiceFormControlLabel","Component","QuestionForm","question","FormControl","component","Card","required","FormLabel","type","QuestionsList","questions","List","QuestionsCard","getScore","CardHeader","subheader","title","CardContent","questionsJson","sum","previousValue","currentValue","Questions","debug","answers","state","answersByType","get","undefined","current","score","reduce","Map","set","scoreByType","JSON","stringify","setState","length","questionsByType","forEach","element","Array","push","initQuestionsByType","key","fill","initAnswersByType","scoresByType","initScoreByType","values","filter","App","className","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2daa8d77.chunk.js","sourcesContent":["export enum QuestionType {\n  Know = 'KNOW',\n  Walk = 'WALK',\n  Relate = 'RELATE',\n  Serve = 'SERVE',\n  Share = 'SHARE',\n}\n","export interface Text {\n  [language: string]: string;\n}\n\nexport function getText(text: Text, language: string): string {\n  let result = text[language];\n  if (!result) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return result;\n}\n","import { Choice } from '../types/Choice';\nimport { FormControlLabel, Radio, RadioGroup, Typography } from '@material-ui/core';\nimport { ChangeEvent, Component } from 'react';\nimport { getText } from '../types/Text';\nimport { QuestionType } from '../types/QuestionType';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\n\nfunction ChoiceFormControlLabel(choice: Choice, index: number, language: string): JSX.Element {\n  const text = getText(choice.text, language);\n  const label = <Typography variant='body2'>{text}</Typography>;\n  const value = `${choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={index}\n      label={label}\n      labelPlacement='top'\n      value={value}\n    />\n  );\n}\n\ninterface ChoicesProps {\n  choices: Array<Choice>;\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questionType: QuestionType;\n  questionIndex: number;\n}\n\nexport class Choices extends Component<ChoicesProps> {\n  render(): JSX.Element {\n    const { choices, handleChange, language, questionIndex, questionType } = this.props;\n    const mapChoice = (choice: Choice, index: number) => ChoiceFormControlLabel(choice, index, language);\n    return (\n      <RadioGroup\n        aria-label='choices'\n        name='choices'\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\n          console.log(`>>> Choices::render()::onChange(): index=${questionIndex} : ${event.target.value}`);\n          handleChange(questionType, questionIndex, Number(event.target.value));\n        }}\n        row\n      >\n        {choices.map(mapChoice)}\n      </RadioGroup>\n    );\n  }\n}\n","import { Question } from '../types/Question';\nimport { Card, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../types/Text';\nimport { Choices } from './Choices';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\n\ninterface QuestionFormProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: Question;\n  questionIndex: number;\n}\n\nexport function QuestionForm(props: QuestionFormProps): JSX.Element {\n  const { handleChange, language, question, questionIndex } = props;\n  return (\n    <FormControl\n      component={Card}\n      required\n    >\n      <FormLabel required>{getText(question.text, language)}</FormLabel>\n      <Choices\n        choices={question.choices}\n        language={language}\n        handleChange={handleChange}\n        questionType={question.type}\n        questionIndex={questionIndex}\n      />\n    </FormControl>\n  );\n}\n","import { Question } from '../types/Question';\nimport { List } from '@material-ui/core';\nimport { QuestionForm } from './QuestionForm';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\n\ninterface QuestionsListProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questions: Array<Question>;\n}\n\nexport function QuestionsList(props: QuestionsListProps): JSX.Element {\n  const { handleChange, language, questions } = props;\n  return (\n    <List component='ol'>\n      {questions.map((question, index) =>\n        <QuestionForm\n          handleChange={handleChange}\n          key={`${question.type}-${index}`}\n          language={language}\n          question={question}\n          questionIndex={index}\n        />)}\n    </List>\n  );\n}\n","import { Card, CardContent, CardHeader } from '@material-ui/core';\nimport { Question } from '../types/Question';\nimport { QuestionType } from '../types/QuestionType';\nimport { QuestionsList } from './QuestionsList';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { GetScore } from '../types/GetScore';\n\ninterface QuestionsCardProps {\n  getScore: GetScore;\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questions: Array<Question>;\n  questionType: QuestionType;\n}\n\nexport function QuestionsCard(props: QuestionsCardProps): JSX.Element {\n  const { getScore, handleChange, language, questions, questionType } = props;\n  return (\n    <Card>\n      <CardHeader subheader={`${getScore(questionType)} points`} title={`${questionType} Questions`}/>\n      <CardContent>\n        <QuestionsList\n          handleChange={handleChange}\n          language={language}\n          questions={questions}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n","import questionsJson from '../questions.json';\nimport { Question } from '../types/Question';\nimport { QuestionType } from '../types/QuestionType';\nimport { Component } from 'react';\nimport { QuestionsCard } from './QuestionsCard';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { GetScore } from '../types/GetScore';\n\nconst questions = questionsJson as Array<Question>;\n\ninterface QuestionsState {\n  answersByType: Map<QuestionType, Array<number>>;\n  questionsByType: Map<QuestionType, Array<Question>>;\n  scoreByType: Map<QuestionType, number>;\n}\n\nfunction initQuestionsByType(questions: Array<Question>): Map<QuestionType, Array<Question>> {\n  const questionsByType = new Map<QuestionType, Array<Question>>();\n  questions.forEach((question: Question) => {\n    console.debug(`>>> Questions::toQuestionsByType() : questions loop : question=${JSON.stringify(question)}`);\n    let element = questionsByType.get(question.type);\n    if (element === undefined) {\n      element = new Array<Question>();\n      questionsByType.set(question.type, element);\n    }\n    element.push(question);\n  });\n  return questionsByType;\n}\n\nfunction initAnswersByType(questionsByType: Map<QuestionType, Array<Question>>): Map<QuestionType, Array<number>> {\n  const answersByType = new Map<QuestionType, Array<number>>();\n  questionsByType.forEach((value, key) => {\n    answersByType.set(key, Array(value.length).fill(0));\n  });\n  return answersByType;\n}\n\nfunction initScoreByType(answersByType: Map<QuestionType, Array<number>>): Map<QuestionType, number> {\n  const scoreByType = new Map<QuestionType, number>();\n  answersByType.forEach((value, key) => {\n    scoreByType.set(key, value.reduce(sum, 0));\n  });\n  return scoreByType;\n}\n\nfunction sum(previousValue: number, currentValue: number): number {\n  return previousValue + currentValue;\n}\n\nexport class Questions extends Component<any, QuestionsState> {\n  constructor(props: any) {\n    super(props);\n    console.log(`Loading ${questions.length} questions ...`);\n    console.debug(`>>> Questions::constructor() : questions=${JSON.stringify(questions)}`);\n\n    const questionsByType = initQuestionsByType(questions);\n    questionsByType.forEach((value, key) => {\n      console.log(`... ${value.length} ${key} questions`);\n    });\n\n    const answersByType = initAnswersByType(questionsByType);\n    answersByType.forEach((value, key) => {\n      console.log(`... ${key} answers: ${JSON.stringify(value)}`);\n    });\n\n    const scoresByType = initScoreByType(answersByType);\n    scoresByType.forEach(((value, key) => {\n      console.log(`... ${key} score: ${value}`);\n    }));\n\n    this.state = {\n      answersByType: answersByType,\n      questionsByType: questionsByType,\n      scoreByType: scoresByType,\n    };\n    console.debug(`>>> Questions::() : state=${JSON.stringify(this.state)}`);\n  }\n\n  handleChange: UpdateAnswerHandler = (questionType: QuestionType, questionIndex: number, value: number) => {\n    console.debug(`>>> Questions::handleChange() : questionType=${questionType}, questionIndex=${questionIndex}, value=${value}`);\n    let answers: Array<number> | undefined = this.state.answersByType.get(questionType);\n    if (answers === undefined) {\n      console.warn(`Something went wrong! 'get(${questionType})' should return an array`);\n      return;\n    }\n    console.debug(`>>> Questions::handleChange() : BEFORE: questionType=${questionType}, answers=${answers}`);\n    answers = answers.map((current, index) => index === questionIndex ? value : current);\n    console.debug(`>>> Questions::handleChange() :  AFTER: questionType=${questionType}, answers=${answers}`);\n\n    const score = answers.reduce(sum, 0);\n    console.debug(`>>> Questions::handleChange() : score=${score}`);\n\n    const state: QuestionsState = {\n      ...this.state,\n      answersByType: new Map(this.state.answersByType).set(questionType, answers),\n      scoreByType: new Map(this.state.scoreByType).set(questionType, score),\n    };\n    console.debug(`>>> Questions::handleChange() : state=${JSON.stringify(state)}`);\n\n    console.debug(`>>> Questions::handleChange() : BEFORE: ${JSON.stringify(this.state)}`);\n    this.setState(state);\n    console.debug(`>>> Questions::handleChange() :  AFTER: ${JSON.stringify(this.state)}`);\n  };\n\n  getScore: GetScore = (questionType: QuestionType) => {\n    console.debug(`>>> Questions::getScore() : questionType=${questionType}`);\n    const score = this.state.scoreByType.get(questionType);\n    if (score === undefined) {\n      console.warn(`Something went wrong! get(${questionType}) should return a number`);\n      return 0;\n    }\n    console.debug(`>>> Questions::getScore() : score=${score}`);\n    return score;\n  };\n\n  render(): JSX.Element {\n    return (\n      <div>\n        {Object.values(QuestionType).map((questionType: QuestionType) =>\n          <QuestionsCard\n            getScore={this.getScore}\n            handleChange={this.handleChange}\n            key={questionType}\n            language={'en'}\n            questions={questions.filter((question) => question.type === questionType)}\n            questionType={questionType}\n          />)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { Questions } from './components/Questions';\nimport { CssBaseline } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <header className=\"App-header\">\n        Grace Spiritual Discovery Tool\n      </header>\n      <Questions/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}