{"version":3,"sources":["types/MultilingualText.ts","components/x-choice/Choice.tsx","components/x-choices/Choices.styles.ts","components/x-choices/Choices.tsx","components/x-question/Question.styles.tsx","components/x-question/Question.tsx","components/x-questions/Questions.tsx","components/x-stage-info/StageInfo.tsx","components/x-email-assessment-button/EmailAssessmentButton.tsx","types/AreaResult.ts","components/x-assessment/Assessment.tsx","types/Stage.ts","types/AreaScore.ts","types/RawQuestion.ts","components/x-language-list/LanguageList.styles.ts","components/x-language-list/LanguageList.tsx","components/x-topbar/TopBar.styles.ts","components/x-topbar/TopBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","missing","Object","keys","first","console","warn","Choice","props","choice","index","found","label","Typography","variant","value","points","FormControlLabel","control","Radio","useStyles","makeStyles","theme","createStyles","radioGroup","flex","Choices","handleChange","question","classes","RadioGroup","aria-label","className","name","onChange","event","Number","target","debug","choices","map","card","cardHeader","cardHeaderTitle","fontWeight","textAlign","textTransform","formControl","formLabel","fontSize","Question","Card","CardHeader","title","titleTypographyProps","color","size","FormControl","component","required","CardContent","FormLabel","Divider","CardActions","Questions","questions","Grid","alignItems","container","direction","justify","spacing","item","zeroMinWidth","StageInfo","stage","id","foundId","description","foundDescription","foundName","align","range","min","max","mailto","body","subject","encodeURI","EmailAssessmentButton","s","results","idFound","nameFound","area","join","Button","href","rel","startIcon","Email","errorStage","finalizeResults","scores","stages","score","percentage","current","total","Math","round","filter","length","error","JSON","stringify","getStage","log","stagesJson","Assessment","Map","forEach","get","type","answer","reduce","set","Array","from","values","computeScores","components","createComponent","parse","margin","select","minWidth","defaultLanguageOption","code","languageOptions","LanguageList","useState","localStorage","getItem","setLanguage","useEffect","setItem","Select","MenuItem","flexGrow","TopBar","AppBar","position","Toolbar","IconButton","rawQuestions","questionsJson","parsedQuestions","loadQuestions","App","state","setState","Container","prevQuestions","value1","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e4f2d414.chunk.js","sourcesContent":["export interface MultilingualText {\n  readonly [language: string]: string;\n}\n\nexport function getText(text: MultilingualText, language: string): [string, boolean] {\n  let result = text[language];\n  const missing = !result;\n  if (missing) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return [result, !missing];\n}\n","import { Choice as IChoice } from '../../types/Choice';\nimport { getText } from '../../types/MultilingualText';\nimport { FormControlLabel, Radio, Typography } from '@material-ui/core';\n\nexport interface ChoiceProps {\n  readonly choice: IChoice;\n  readonly index: number;\n  readonly language: string;\n}\n\nexport function Choice(props: ChoiceProps): JSX.Element {\n  const { choice, index, language } = props;\n  const [text, found] = getText(choice.text, language);\n  const label = <Typography variant='body2'>{found ? '' : '*'}{text}</Typography>;\n  const value = `${choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={index}\n      label={label}\n      value={value}\n    />\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    radioGroup: {\n      flex: 'auto',\n    },\n  }),\n);\n","import { RadioGroup } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Choice } from '../x-choice/Choice';\nimport { Question } from '../../types/Question';\nimport { useStyles } from './Choices.styles';\n\nexport interface ChoicesProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly language: string;\n  readonly question: Question;\n}\n\nexport function Choices(props: ChoicesProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  const classes = useStyles();\n  return (\n    <RadioGroup\n      aria-label='choices'\n      className={classes.radioGroup}\n      name='choices'\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const value: number = Number(event.target.value);\n        console.debug(`>>> Choices::onChange(): question.index=${question.index} : ${value}`);\n        handleChange(question, value);\n      }}\n    >\n      {question.choices.map((choice, index) => {\n        return (\n          <Choice\n            choice={choice}\n            index={index}\n            key={index}\n            language={language}\n          />\n        );\n      })}\n    </RadioGroup>\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {},\n    cardHeader: {},\n    cardHeaderTitle: {\n      fontWeight: 'bold',\n      textAlign: 'start',\n      textTransform: 'uppercase',\n    },\n    formControl: {},\n    formLabel: {\n      fontSize: 'x-large',\n      fontWeight: 'lighter',\n      textAlign: 'start',\n    },\n  }),\n);\n","import { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Card, CardActions, CardContent, CardHeader, Divider, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../../types/MultilingualText';\nimport { Choices } from '../x-choices/Choices';\nimport { useStyles } from './Question.styles';\n\nexport interface QuestionProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly language: string;\n  readonly question: IQuestion;\n}\n\nexport function Question(props: QuestionProps): JSX.Element {\n  const classes = useStyles();\n  const { handleChange, language, question } = props;\n  const [text, found] = getText(question.text, language);\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        className={classes.cardHeader}\n        title={`Question ${question.index}`}\n        titleTypographyProps={{\n          className: classes.cardHeaderTitle,\n          color: 'textSecondary',\n          variant: 'body2',\n          size: 'small',\n        }}\n      />\n      <FormControl className={classes.formControl} component='fieldset' required>\n        <CardContent>\n          <FormLabel className={classes.formLabel} component='legend' required>{found ? '' : '*'}{text}</FormLabel>\n        </CardContent>\n        <CardContent><Divider/></CardContent>\n        <CardContent>\n          <CardActions>\n            <Choices\n              language={language}\n              handleChange={handleChange}\n              question={question}\n            />\n          </CardActions>\n        </CardContent>\n      </FormControl>\n    </Card>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport { Question as IQuestion } from '../../types/Question';\nimport { Question } from '../x-question/Question';\nimport { UpdateAnswerHandler } from '../../types/UpdateAnswerHandler';\n\nexport interface QuestionsProps {\n  readonly handleChange: UpdateAnswerHandler;\n  readonly language: string;\n  readonly questions: ReadonlyArray<IQuestion>;\n}\n\nexport function Questions(props: QuestionsProps): JSX.Element {\n  const { handleChange, language, questions } = props;\n  return (\n    <Grid\n      alignItems='stretch'\n      container\n      direction='column'\n      justify='center'\n      spacing={2}\n    >\n      {questions.map((question) =>\n        <Grid item key={question.index} zeroMinWidth>\n          <Question\n            handleChange={handleChange}\n            key={question.index}\n            language={language}\n            question={question}\n          />\n        </Grid>)}\n    </Grid>\n  );\n}\n","import { Card, CardContent, Typography } from '@material-ui/core';\nimport { getText } from '../../types/MultilingualText';\nimport { Stage } from '../../types/Stage';\n\nexport interface StageInfoProps {\n  readonly language: string\n  readonly stage: Stage\n}\n\nexport function StageInfo(props: StageInfoProps): JSX.Element {\n  const { language, stage } = props;\n  const [id, foundId] = getText(stage.id, language);\n  const [description, foundDescription] = getText(stage.description, language);\n  const [name, foundName] = getText(stage.name, language);\n  return (\n    <Card variant='outlined'>\n      <CardContent>\n        <Typography\n          align='left'\n          color='textSecondary'\n          variant='body2'\n        >\n          {stage.range.min}&ndash;{stage.range.max}%\n        </Typography>\n        <Typography\n          align='left'\n          variant='subtitle1'\n        >\n          {foundId ? '' : '*'}{id}: {foundName ? '' : '*'}{name}\n        </Typography>\n        <Typography\n          align='left'\n          variant='body2'\n        >\n          {foundDescription ? '' : '*'}{description}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Button } from '@material-ui/core';\nimport { Email } from '@material-ui/icons';\nimport { AreaResult } from '../../types/AreaResult';\nimport { getText } from '../../types/MultilingualText';\n\nfunction mailto(\n  body: string,\n  subject: string,\n): string {\n  return encodeURI(`mailto:?body=${body}&subject=${subject}`);\n}\n\nexport interface EmailAssessmentButtonProps {\n  readonly language: string\n  readonly results: ReadonlyArray<AreaResult>\n}\n\nexport function EmailAssessmentButton(props: EmailAssessmentButtonProps) {\n  const { language, results } = props;\n  const s = results.map((result) => {\n    const [id, idFound] = getText(result.stage.id, language);\n    const [name, nameFound] = getText(result.stage.name, language);\n    return `${result.area} : ${idFound ? '' : '*'}${id}: ${nameFound ? '' : '*'}${name}`;\n  });\n  const body = `Here is the assessment from the Grace Spiritual Discovery Tool.\\n- ${s.join('\\n- ')}`;\n  return (\n    <Button\n      href={mailto(\n        body,\n        'Grace Spiritual Discovery Tool - Assessment',\n      )}\n      rel='noopener noreferrer'\n      startIcon={<Email/>}\n      target='_blank'\n      variant='outlined'\n    >\n      Email Assessment\n    </Button>\n  );\n}\n","import { Stage } from './Stage';\nimport { AreaScore } from './AreaScore';\n\nexport interface AreaResult extends AreaScore {\n  readonly percentage: number\n  readonly stage: Stage\n}\n\nconst errorStage: Stage = {\n  description: {\n    'en': 'Error Description',\n  },\n  id: {\n    'en': 'Error ID',\n  },\n  name: {\n    'en': 'Error Name',\n  },\n  range: {\n    max: -1,\n    min: -1,\n  },\n};\n\nconst toPercentage = (value: number): number => Math.round(value * 100);\n\nconst getStage = (percentage: number, stages: ReadonlyArray<Stage>): Stage => {\n  const filter = stages.filter((stage) => stage.range.min <= percentage && percentage <= stage.range.max);\n  if (filter.length === 1) {\n    return filter[0];\n  }\n  console.error(`The ${percentage} percentage resulted in an unexpected list: ${JSON.stringify(filter)}`);\n  return errorStage;\n};\n\nexport function finalizeResults(scores: ReadonlyArray<AreaScore>, stages: ReadonlyArray<Stage>): ReadonlyArray<AreaResult> {\n  return scores.map((score) => {\n    const percentage = toPercentage(score.current / score.total);\n    const stage = getStage(percentage, stages);\n    return {\n      ...score,\n      percentage: percentage,\n      stage: stage,\n    };\n  });\n}\n","import { Card, CardActions, CardContent, CardHeader } from '@material-ui/core';\nimport { Question } from '../../types/Question';\nimport { loadStages } from '../../types/Stage';\nimport { getText } from '../../types/MultilingualText';\nimport { StageInfo } from '../x-stage-info/StageInfo';\nimport { EmailAssessmentButton } from '../x-email-assessment-button/EmailAssessmentButton';\nimport { computeScores } from '../../types/AreaScore';\nimport { AreaResult, finalizeResults } from '../../types/AreaResult';\n\nconst stages = loadStages();\n\nfunction createComponent(results: ReadonlyArray<AreaResult>, language: string): ReadonlyArray<string> {\n  return results.map((result, index) => {\n    console.debug(`>>> Assessment::createComponent(): index=${index}, result=${JSON.stringify(result)}`);\n    const [text, found] = getText(result.stage.name, language);\n    return `${result.area}: ${result.current} / ${result.total} : ${result.percentage}%: ${found ? '' : '*'}${text}`;\n  });\n}\n\nexport interface AssessmentProps {\n  readonly language: string\n  readonly questions: ReadonlyArray<Question>;\n}\n\nexport function Assessment(props: AssessmentProps): JSX.Element {\n  const { language, questions } = props;\n  const scores = computeScores(questions);\n  const results = finalizeResults(scores, stages);\n  const components = createComponent(results, language);\n  return (\n    <Card>\n      <CardHeader title='Assessment Results'/>\n      <CardContent>\n        <ol>\n          {components.map((value, index) => <li key={index}>{value}</li>)}\n        </ol>\n        {stages.map((stage, index) => <StageInfo key={index} language={language} stage={stage}/>)}\n      </CardContent>\n      <CardActions>\n        <EmailAssessmentButton language={language} results={results}/>\n      </CardActions>\n    </Card>\n  );\n}\n","import { MultilingualText } from './MultilingualText';\nimport stagesJson from '../assets/stages.json';\n\nexport interface Stage {\n  readonly description: MultilingualText\n  readonly id: MultilingualText\n  readonly name: MultilingualText\n  readonly range: {\n    readonly min: number\n    readonly max: number\n  }\n}\n\nexport function loadStages(): ReadonlyArray<Stage> {\n  console.log(`Loading ${stagesJson.length} stages ...`);\n  return stagesJson;\n}\n","import { QuestionType } from './QuestionType';\nimport { Question } from './Question';\n\nexport interface AreaScore {\n  readonly area: QuestionType\n  readonly current: number\n  readonly total: number\n}\n\nexport function computeScores(questions: ReadonlyArray<Question>): ReadonlyArray<AreaScore> {\n  const map = new Map<QuestionType, AreaScore>();\n  questions.forEach((question) => {\n    let score = map.get(question.type) ?? { area: question.type, current: 0, total: 0 };\n    score = {\n      area: score.area,\n      current: score.current + question.answer,\n      total: score.total + question.choices.reduce((max, choice) => Math.max(max, choice.points), 0),\n    };\n    map.set(question.type, score);\n  });\n  return Array.from(map.values());\n}\n","import { MultilingualText } from './MultilingualText';\nimport { QuestionType } from './QuestionType';\nimport { Choice } from './Choice';\nimport questionsJson from '../assets/questions.json';\nimport { Question } from './Question';\n\nexport interface RawQuestion {\n  readonly choices: Choice[]\n  readonly text: MultilingualText\n  readonly type: QuestionType\n}\n\nfunction parse(value: RawQuestion, index: number): Question {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    choices: value.choices,\n    index: index + 1,\n    text: value.text,\n    type: value.type,\n  };\n}\n\nexport function loadQuestions(): Array<Question> {\n  const rawQuestions = questionsJson as Array<RawQuestion>;\n  console.log(`Loading ${rawQuestions.length} questions ...`);\n  const parsedQuestions = rawQuestions.map(parse);\n  console.debug(`>>> Questions::() : parsedQuestions=${JSON.stringify(parsedQuestions)}`);\n  return parsedQuestions;\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n    },\n    select: {\n      color: 'white',\n      minWidth: 120,\n    },\n  }),\n);\n","import { FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport { useStyles } from './LanguageList.styles';\n\nconst defaultLanguageOption = {\n  code: 'en',\n  text: 'English',\n};\n\nconst languageOptions = [\n  defaultLanguageOption,\n  {\n    code: 'zh',\n    text: '中文',\n  },\n];\n\nexport function LanguageList(): JSX.Element {\n  const classes = useStyles();\n  const [language, setLanguage] = useState<string>(localStorage.getItem('language') || defaultLanguageOption.code);\n  const handleChange = (event: ChangeEvent<{ value: unknown }>) => { setLanguage(event.target.value as string); };\n  useEffect(() => { localStorage.setItem('language', language); }, [language]);\n\n  return (\n    <FormControl className={classes.formControl}>\n      <Select\n        className={classes.select}\n        id='language-select'\n        onChange={handleChange}\n        value={language}\n      >\n        {languageOptions.map((value) => (\n          <MenuItem key={value.code} value={value.code}>{value.text}</MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1,\n      textAlign: 'start',\n    },\n  }),\n);\n","import { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { LanguageList } from '../x-language-list/LanguageList';\nimport React from 'react';\nimport { useStyles } from './TopBar.styles';\n\nexport function TopBar(): JSX.Element {\n  const classes = useStyles();\n\n  return (\n    <AppBar position='fixed'>\n      <Toolbar>\n        <IconButton aria-label='menu'><MenuIcon/></IconButton>\n        <Typography className={classes.title} variant=\"h6\">Grace Spiritual Discovery Tool</Typography>\n        <LanguageList/>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Questions } from './components/x-questions/Questions';\nimport { Container, Typography } from '@material-ui/core';\nimport { Assessment } from './components/x-assessment/Assessment';\nimport { UpdateAnswerHandler } from './types/UpdateAnswerHandler';\nimport { Question } from './types/Question';\nimport { loadQuestions } from './types/RawQuestion';\nimport { TopBar } from './components/x-topbar/TopBar';\n\nconst questions = loadQuestions();\n\nfunction App() {\n  const [language] = useState('en');\n  const [state, setState] = useState(questions);\n\n  const handleChange: UpdateAnswerHandler = (question: Question, value: number) => {\n    console.debug(`>>> App::handleChange() : value=${value}, question=${JSON.stringify(question)}`);\n    setState((prevQuestions) => {\n      return prevQuestions.map((value1) => {\n        const copy = { ...value1 };\n        if (value1.index === question.index) {\n          copy.answer = value;\n        }\n        return copy;\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TopBar/>\n        Grace Spiritual Discovery Tool\n      </header>\n      <Container>\n        <Typography>Questions</Typography>\n        <Questions\n          handleChange={handleChange}\n          language={language}\n          questions={state}\n        />\n        <Assessment\n          language={language}\n          questions={state}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}