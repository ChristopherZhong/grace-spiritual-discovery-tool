{"version":3,"sources":["types/Text.ts","components/ChoiceRadio.tsx","components/Choices.tsx","components/QuestionCard.tsx","components/Questions.tsx","components/Results.tsx","types/Question.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getText","text","language","result","Object","keys","first","console","warn","ChoiceRadio","props","choice","label","Typography","variant","value","points","FormControlLabel","control","Radio","labelPlacement","index","Choices","handleChange","question","RadioGroup","aria-label","name","onChange","event","Number","target","debug","row","choices","map","QuestionCard","Card","CardHeader","title","FormControl","required","CardContent","FormLabel","CardActionArea","CardActions","Questions","questions","Grid","alignItems","container","direction","justify","spacing","item","zeroMinWidth","Results","Map","forEach","c","get","type","undefined","current","total","answer","reduce","previousValue","currentValue","Math","max","set","l","key","log","push","parse","JSON","stringify","length","parsedQuestions","loadQuestions","App","useState","state","setState","className","Container","prevQuestions","value1","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a66e2742.chunk.js","sourcesContent":["export interface Text {\n  [language: string]: string;\n}\n\nexport function getText(text: Text, language: string): string {\n  let result = text[language];\n  if (!result) {\n    const [first] = Object.keys(text);\n    result = text[first];\n    console.warn(`The \"${language}\" language is not available for the \"${result}\" text; defaulting to the \"${first}\" language`);\n  }\n  return result;\n}\n","import { Choice } from '../types/Choice';\nimport { getText } from '../types/Text';\nimport { FormControlLabel, Radio, Typography } from '@material-ui/core';\n\ninterface ChoiceProps {\n  choice: Choice;\n  index: number;\n  language: string;\n}\n\nexport function ChoiceRadio(props: ChoiceProps): JSX.Element {\n  const text = getText(props.choice.text, props.language);\n  const label = <Typography variant='body2'>{text}</Typography>;\n  const value = `${props.choice.points}`;\n  return (\n    <FormControlLabel\n      control={<Radio/>}\n      key={props.index}\n      label={label}\n      labelPlacement='top'\n      value={value}\n    />\n  );\n}\n","import { Choice } from '../types/Choice';\nimport { RadioGroup } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { ChoiceRadio } from './ChoiceRadio';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\n\ninterface ChoicesProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: ParsedQuestion;\n}\n\nexport function Choices(props: ChoicesProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  return (\n    <RadioGroup\n      aria-label='choices'\n      name='choices'\n      onChange={(event: ChangeEvent<HTMLInputElement>) => {\n        const value: number = Number(event.target.value);\n        console.debug(`>>> Choices::onChange(): question.index=${question.index} : ${value}`);\n        handleChange(question, value);\n      }}\n      row\n    >\n      {question.choices.map((choice: Choice, index: number) => {\n        return (\n          <ChoiceRadio\n            choice={choice}\n            index={index}\n            key={index}\n            language={language}\n          />\n        );\n      })}\n    </RadioGroup>\n  );\n}\n","import { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, FormControl, FormLabel } from '@material-ui/core';\nimport { getText } from '../types/Text';\nimport { Choices } from './Choices';\n\ninterface QuestionCardProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  question: ParsedQuestion;\n}\n\nexport function QuestionCard(props: QuestionCardProps): JSX.Element {\n  const { handleChange, language, question } = props;\n  return (\n    <Card>\n      <CardHeader title={`Question ${question.index}.`}/>\n      <FormControl required>\n        <CardContent>\n          <FormLabel required>{getText(question.text, language)}</FormLabel>\n        </CardContent>\n        <CardActionArea>\n          <CardActions>\n            <Choices\n              language={language}\n              handleChange={handleChange}\n              question={question}\n            />\n          </CardActions>\n        </CardActionArea>\n      </FormControl>\n    </Card>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\nimport { QuestionCard } from './QuestionCard';\nimport { UpdateAnswerHandler } from '../types/UpdateAnswerHandler';\n\ninterface QuestionsProps {\n  handleChange: UpdateAnswerHandler;\n  language: string;\n  questions: Array<ParsedQuestion>;\n}\n\nexport function Questions(props: QuestionsProps): JSX.Element {\n  const { handleChange, language, questions } = props;\n  return (\n    <Grid\n      alignItems='stretch'\n      container\n      direction='column'\n      justify='center'\n      spacing={2}\n    >\n      {questions.map((question) =>\n        <Grid item key={question.index} zeroMinWidth>\n          <QuestionCard\n            handleChange={handleChange}\n            key={question.index}\n            language={language}\n            question={question}\n          />\n        </Grid>)}\n    </Grid>\n  );\n}\n","import { Card, CardContent, CardHeader } from '@material-ui/core';\nimport { QuestionType } from '../types/QuestionType';\nimport { ParsedQuestion } from '../types/ParsedQuestion';\n\ninterface ResultsProps {\n  questions: Array<ParsedQuestion>;\n  // scores: Map<QuestionType, number>;\n}\n\nexport function Results(props: ResultsProps): JSX.Element {\n  const { questions } = props;\n  const map = new Map<QuestionType, { current: number, total: number }>();\n  questions.forEach((value) => {\n    let c = map.get(value.type);\n    if (c === undefined) {\n      c = {\n        current: 0,\n        total: 0,\n      };\n    }\n    c.current += value.answer;\n    c.total += value.choices.reduce((previousValue, currentValue) => Math.max(previousValue, currentValue.points), 0);\n    map.set(value.type, c);\n  });\n  const l: Array<string> = [];\n  map.forEach((value, key) => {\n    console.log(`>>> type=${key}, value=${value}`);\n    l.push(`${key} : ${value.current} / ${value.total}`);\n  });\n  return (\n    <Card>\n      <CardHeader title='Final results'/>\n      <CardContent>\n        <ol>\n          {/*{questions.map((value, index) => <li key={index}>{JSON.stringify(value.answer)}</li>)}*/}\n          {/*<li>{JSON.stringify(questions[28])}</li>*/}\n          {l.map((value, index) => <li key={index}>{value}</li>)}\n        </ol>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Text } from './Text';\nimport { QuestionType } from './QuestionType';\nimport { Choice } from './Choice';\nimport questionsJson from '../questions.json';\nimport { ParsedQuestion } from './ParsedQuestion';\n\nconst questions = questionsJson as Array<Question>;\n\nexport interface Question {\n  choices: Choice[]\n  text: Text\n  type: QuestionType\n}\n\nfunction parse(value: Question, index: number): ParsedQuestion {\n  console.debug(`>>> Questions::() : index=${index}, value=${JSON.stringify(value)}`);\n  return {\n    answer: 0,\n    choices: value.choices,\n    index: index + 1,\n    text: value.text,\n    type: value.type,\n  };\n}\n\nexport function loadQuestions(): Array<ParsedQuestion> {\n  console.log(`Loading ${questions.length} questions ...`);\n  const parsedQuestions = questions.map(parse);\n  console.debug(`>>> Questions::() : parsedQuestions=${JSON.stringify(parsedQuestions)}`);\n  return parsedQuestions;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Questions } from './components/Questions';\nimport { Container, Typography } from '@material-ui/core';\nimport { Results } from './components/Results';\nimport { UpdateAnswerHandler } from './types/UpdateAnswerHandler';\nimport { ParsedQuestion } from './types/ParsedQuestion';\nimport { loadQuestions } from './types/Question';\n\nconst questions = loadQuestions();\n\nfunction App() {\n  const [state, setState] = useState(questions);\n\n  const handleChange: UpdateAnswerHandler = (question: ParsedQuestion, value: number) => {\n    console.log(`>>> Questions::handleChange() : question=${JSON.stringify(question)}`);\n    console.log(`>>> Questions::handleChange() : value=${value}`);\n    setState((prevQuestions) => {\n      return prevQuestions.map((value1) => {\n        const copy = { ...value1 };\n        if (value1.index === question.index) {\n          copy.answer = value;\n        }\n        return copy;\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Grace Spiritual Discovery Tool\n      </header>\n      <Container>\n        <Typography>Questions</Typography>\n        <Questions\n          handleChange={handleChange}\n          language={'en'}\n          questions={state}\n        />\n        <Results\n          questions={state}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}